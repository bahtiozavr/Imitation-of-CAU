
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000107a  0000110e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000136  00800104  00800104  00001112  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001112  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00001142  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c97  00000000  00000000  00001232  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003be  00000000  00000000  00001ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b43  00000000  00000000  00002287  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000338  00000000  00000000  00002dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030c  00000000  00000000  00003104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1c  00000000  00000000  00003410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00003e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
       2:	00 00       	nop
       4:	7c c0       	rjmp	.+248    	; 0xfe <__bad_interrupt>
       6:	00 00       	nop
       8:	7a c0       	rjmp	.+244    	; 0xfe <__bad_interrupt>
       a:	00 00       	nop
       c:	78 c0       	rjmp	.+240    	; 0xfe <__bad_interrupt>
       e:	00 00       	nop
      10:	76 c0       	rjmp	.+236    	; 0xfe <__bad_interrupt>
      12:	00 00       	nop
      14:	74 c0       	rjmp	.+232    	; 0xfe <__bad_interrupt>
      16:	00 00       	nop
      18:	72 c0       	rjmp	.+228    	; 0xfe <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c2       	rjmp	.+1282   	; 0x520 <__vector_7>
      1e:	00 00       	nop
      20:	49 c2       	rjmp	.+1170   	; 0x4b4 <__vector_8>
      22:	00 00       	nop
      24:	6c c0       	rjmp	.+216    	; 0xfe <__bad_interrupt>
      26:	00 00       	nop
      28:	6a c0       	rjmp	.+212    	; 0xfe <__bad_interrupt>
      2a:	00 00       	nop
      2c:	68 c0       	rjmp	.+208    	; 0xfe <__bad_interrupt>
      2e:	00 00       	nop
      30:	a8 c1       	rjmp	.+848    	; 0x382 <__vector_12>
      32:	00 00       	nop
      34:	64 c0       	rjmp	.+200    	; 0xfe <__bad_interrupt>
      36:	00 00       	nop
      38:	62 c0       	rjmp	.+196    	; 0xfe <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b9 c1       	rjmp	.+882    	; 0x3b0 <__vector_15>
      3e:	00 00       	nop
      40:	5e c0       	rjmp	.+188    	; 0xfe <__bad_interrupt>
      42:	00 00       	nop
      44:	5c c0       	rjmp	.+184    	; 0xfe <__bad_interrupt>
      46:	00 00       	nop
      48:	5a c0       	rjmp	.+180    	; 0xfe <__bad_interrupt>
      4a:	00 00       	nop
      4c:	58 c0       	rjmp	.+176    	; 0xfe <__bad_interrupt>
      4e:	00 00       	nop
      50:	56 c0       	rjmp	.+172    	; 0xfe <__bad_interrupt>
      52:	00 00       	nop
      54:	9b c2       	rjmp	.+1334   	; 0x58c <__vector_21>
      56:	00 00       	nop
      58:	52 c0       	rjmp	.+164    	; 0xfe <__bad_interrupt>
      5a:	00 00       	nop
      5c:	50 c0       	rjmp	.+160    	; 0xfe <__bad_interrupt>
      5e:	00 00       	nop
      60:	4e c0       	rjmp	.+156    	; 0xfe <__bad_interrupt>
      62:	00 00       	nop
      64:	4c c0       	rjmp	.+152    	; 0xfe <__bad_interrupt>
      66:	00 00       	nop
      68:	4a c0       	rjmp	.+148    	; 0xfe <__bad_interrupt>
      6a:	00 00       	nop
      6c:	48 c0       	rjmp	.+144    	; 0xfe <__bad_interrupt>
      6e:	00 00       	nop
      70:	46 c0       	rjmp	.+140    	; 0xfe <__bad_interrupt>
      72:	00 00       	nop
      74:	44 c0       	rjmp	.+136    	; 0xfe <__bad_interrupt>
      76:	00 00       	nop
      78:	5c c1       	rjmp	.+696    	; 0x332 <__vector_30>
      7a:	00 00       	nop
      7c:	40 c0       	rjmp	.+128    	; 0xfe <__bad_interrupt>
      7e:	00 00       	nop
      80:	3e c0       	rjmp	.+124    	; 0xfe <__bad_interrupt>
      82:	00 00       	nop
      84:	3c c0       	rjmp	.+120    	; 0xfe <__bad_interrupt>
      86:	00 00       	nop
      88:	3a c0       	rjmp	.+116    	; 0xfe <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ea 03       	fmulsu	r22, r18
      8e:	4a 04       	cpc	r4, r10
      90:	aa 04       	cpc	r10, r10
      92:	ad 04       	cpc	r10, r13
      94:	1a 04       	cpc	r1, r10
      96:	7a 04       	cpc	r7, r10
      98:	b6 04       	cpc	r11, r6
      9a:	b6 04       	cpc	r11, r6
      9c:	b0 04       	cpc	r11, r0
      9e:	b6 04       	cpc	r11, r6
      a0:	b6 04       	cpc	r11, r6
      a2:	b6 04       	cpc	r11, r6
      a4:	b6 04       	cpc	r11, r6
      a6:	b6 04       	cpc	r11, r6
      a8:	b6 04       	cpc	r11, r6
      aa:	b6 04       	cpc	r11, r6
      ac:	b6 04       	cpc	r11, r6
      ae:	b6 04       	cpc	r11, r6
      b0:	b6 04       	cpc	r11, r6
      b2:	b6 04       	cpc	r11, r6
      b4:	b3 04       	cpc	r11, r3
      b6:	42 06       	cpc	r4, r18
      b8:	50 06       	cpc	r5, r16
      ba:	61 06       	cpc	r6, r17
      bc:	97 06       	cpc	r9, r23
      be:	5e 06       	cpc	r5, r30
      c0:	9e 06       	cpc	r9, r30
      c2:	a1 06       	cpc	r10, r17

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d0 e1       	ldi	r29, 0x10	; 16
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ea e7       	ldi	r30, 0x7A	; 122
      d8:	f0 e1       	ldi	r31, 0x10	; 16
      da:	00 e0       	ldi	r16, 0x00	; 0
      dc:	0b bf       	out	0x3b, r16	; 59
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
      e0:	07 90       	elpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a4 30       	cpi	r26, 0x04	; 4
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	a4 e0       	ldi	r26, 0x04	; 4
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	aa 33       	cpi	r26, 0x3A	; 58
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	e0 d2       	rcall	.+1472   	; 0x6bc <main>
      fc:	bc c7       	rjmp	.+3960   	; 0x1076 <_exit>

000000fe <__bad_interrupt>:
      fe:	80 cf       	rjmp	.-256    	; 0x0 <__vectors>

00000100 <UART1_Transmit>:
			}
		}
	}
	
	return FFFF;
}
     100:	eb e9       	ldi	r30, 0x9B	; 155
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	90 81       	ld	r25, Z
     106:	95 ff       	sbrs	r25, 5
     108:	fd cf       	rjmp	.-6      	; 0x104 <UART1_Transmit+0x4>
     10a:	80 93 9c 00 	sts	0x009C, r24
     10e:	08 95       	ret

00000110 <UART1_Receive>:
     110:	eb e9       	ldi	r30, 0x9B	; 155
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	88 23       	and	r24, r24
     118:	ec f7       	brge	.-6      	; 0x114 <UART1_Receive+0x4>
     11a:	80 91 9c 00 	lds	r24, 0x009C
     11e:	08 95       	ret

00000120 <RR>:
     120:	8a 30       	cpi	r24, 0x0A	; 10
     122:	28 f4       	brcc	.+10     	; 0x12e <RR+0xe>
     124:	80 5d       	subi	r24, 0xD0	; 208
     126:	01 c0       	rjmp	.+2      	; 0x12a <RR+0xa>
     128:	89 5c       	subi	r24, 0xC9	; 201
     12a:	ea cf       	rjmp	.-44     	; 0x100 <UART1_Transmit>
     12c:	08 95       	ret
     12e:	80 31       	cpi	r24, 0x10	; 16
     130:	d8 f3       	brcs	.-10     	; 0x128 <RR+0x8>
     132:	80 e2       	ldi	r24, 0x20	; 32
     134:	fa cf       	rjmp	.-12     	; 0x12a <RR+0xa>

00000136 <ascii_8>:
     136:	cf 93       	push	r28
     138:	c8 2f       	mov	r28, r24
     13a:	82 95       	swap	r24
     13c:	8f 70       	andi	r24, 0x0F	; 15
     13e:	f0 df       	rcall	.-32     	; 0x120 <RR>
     140:	8c 2f       	mov	r24, r28
     142:	8f 70       	andi	r24, 0x0F	; 15
     144:	ed df       	rcall	.-38     	; 0x120 <RR>
     146:	cf 91       	pop	r28
     148:	08 95       	ret

0000014a <read_mass>:

// написать функцию

void read_mass ( unsigned char S) //чтение символов в массив по протоколу ГФ
{
	glavmas [Rec] = S; //читаем данные
     14a:	90 91 04 01 	lds	r25, 0x0104
     14e:	e9 2f       	mov	r30, r25
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	ed 5d       	subi	r30, 0xDD	; 221
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	80 83       	st	Z, r24
	//	UART_TX(glavmas[Rec]);
	
	if (glavmas[Rec] == CR)
     158:	8d 30       	cpi	r24, 0x0D	; 13
     15a:	49 f4       	brne	.+18     	; 0x16e <read_mass+0x24>
	{
		Priem = 1;
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	90 93 23 02 	sts	0x0223, r25
     164:	80 93 22 02 	sts	0x0222, r24
		
		Rec = 0;
     168:	10 92 04 01 	sts	0x0104, r1
     16c:	08 95       	ret
	}
	else  { Rec++ ;}
     16e:	9f 5f       	subi	r25, 0xFF	; 255
     170:	90 93 04 01 	sts	0x0104, r25
     174:	08 95       	ret

00000176 <PORT_Init>:
		 UART1_Transmit(buf[i]);
		 //buf[i]=0;
	 }
	 UART1_Transmit(buf1);
	 
 }
     176:	1b ba       	out	0x1b, r1	; 27
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	8a bb       	out	0x1a, r24	; 26
     17c:	18 ba       	out	0x18, r1	; 24
     17e:	17 ba       	out	0x17, r1	; 23
     180:	15 ba       	out	0x15, r1	; 21
     182:	84 bb       	out	0x14, r24	; 20
     184:	12 ba       	out	0x12, r1	; 18
     186:	8b eb       	ldi	r24, 0xBB	; 187
     188:	81 bb       	out	0x11, r24	; 17
     18a:	13 b8       	out	0x03, r1	; 3
     18c:	12 b8       	out	0x02, r1	; 2
     18e:	10 92 62 00 	sts	0x0062, r1
     192:	10 92 61 00 	sts	0x0061, r1
     196:	08 95       	ret

00000198 <USART1_Init>:
     198:	90 93 98 00 	sts	0x0098, r25
     19c:	80 93 99 00 	sts	0x0099, r24
     1a0:	ea e9       	ldi	r30, 0x9A	; 154
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	88 69       	ori	r24, 0x98	; 152
     1a8:	80 83       	st	Z, r24
     1aa:	ed e9       	ldi	r30, 0x9D	; 157
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	86 60       	ori	r24, 0x06	; 6
     1b2:	80 83       	st	Z, r24
     1b4:	08 95       	ret

000001b6 <ADC_init>:
     1b6:	86 b1       	in	r24, 0x06	; 6
     1b8:	8e 68       	ori	r24, 0x8E	; 142
     1ba:	86 b9       	out	0x06, r24	; 6
     1bc:	3e 9a       	sbi	0x07, 6	; 7
     1be:	36 9a       	sbi	0x06, 6	; 6
     1c0:	08 95       	ret

000001c2 <timer0_init>:
     1c2:	83 b7       	in	r24, 0x33	; 51
     1c4:	88 62       	ori	r24, 0x28	; 40
     1c6:	83 bf       	out	0x33, r24	; 51
     1c8:	12 be       	out	0x32, r1	; 50
     1ca:	88 e1       	ldi	r24, 0x18	; 24
     1cc:	81 bf       	out	0x31, r24	; 49
     1ce:	10 be       	out	0x30, r1	; 48
     1d0:	87 b7       	in	r24, 0x37	; 55
     1d2:	82 60       	ori	r24, 0x02	; 2
     1d4:	87 bf       	out	0x37, r24	; 55
     1d6:	83 b7       	in	r24, 0x33	; 51
     1d8:	8c 62       	ori	r24, 0x2C	; 44
     1da:	83 bf       	out	0x33, r24	; 51
     1dc:	08 95       	ret

000001de <timer1_init>:
     1de:	8f b5       	in	r24, 0x2f	; 47
     1e0:	80 68       	ori	r24, 0x80	; 128
     1e2:	8f bd       	out	0x2f, r24	; 47
     1e4:	8e b5       	in	r24, 0x2e	; 46
     1e6:	88 60       	ori	r24, 0x08	; 8
     1e8:	8e bd       	out	0x2e, r24	; 46
     1ea:	1d bc       	out	0x2d, r1	; 45
     1ec:	1c bc       	out	0x2c, r1	; 44
     1ee:	17 bc       	out	0x27, r1	; 39
     1f0:	16 bc       	out	0x26, r1	; 38
     1f2:	81 e6       	ldi	r24, 0x61	; 97
     1f4:	8b bd       	out	0x2b, r24	; 43
     1f6:	88 ea       	ldi	r24, 0xA8	; 168
     1f8:	8a bd       	out	0x2a, r24	; 42
     1fa:	8e b5       	in	r24, 0x2e	; 46
     1fc:	8b 60       	ori	r24, 0x0B	; 11
     1fe:	8e bd       	out	0x2e, r24	; 46
     200:	87 b7       	in	r24, 0x37	; 55
     202:	80 61       	ori	r24, 0x10	; 16
     204:	87 bf       	out	0x37, r24	; 55
     206:	08 95       	ret

00000208 <BUTTON>:
     208:	10 92 6a 00 	sts	0x006A, r1
     20c:	80 ea       	ldi	r24, 0xA0	; 160
     20e:	8a bf       	out	0x3a, r24	; 58
     210:	80 ec       	ldi	r24, 0xC0	; 192
     212:	89 bf       	out	0x39, r24	; 57
     214:	08 95       	ret

00000216 <decrement>:
void decrement(void)
{
	unsigned char sreg;
	unsigned int i=0;
	/* Save global interrupt flag */
	k--;
     216:	80 91 11 01 	lds	r24, 0x0111
     21a:	90 91 12 01 	lds	r25, 0x0112
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	90 93 12 01 	sts	0x0112, r25
     224:	80 93 11 01 	sts	0x0111, r24
	sreg = SREG;
     228:	2f b7       	in	r18, 0x3f	; 63
	/* Disable interrupts */
	cli();
     22a:	f8 94       	cli
	/* Set TCNTn to i */
	i=OCR1A;
     22c:	8a b5       	in	r24, 0x2a	; 42
     22e:	9b b5       	in	r25, 0x2b	; 43
	
	switch (k)
     230:	80 91 11 01 	lds	r24, 0x0111
     234:	90 91 12 01 	lds	r25, 0x0112
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	91 05       	cpc	r25, r1
     23c:	b1 f0       	breq	.+44     	; 0x26a <decrement+0x54>
     23e:	28 f4       	brcc	.+10     	; 0x24a <decrement+0x34>
     240:	00 97       	sbiw	r24, 0x00	; 0
     242:	49 f0       	breq	.+18     	; 0x256 <decrement+0x40>
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	61 f0       	breq	.+24     	; 0x260 <decrement+0x4a>
     248:	1f c0       	rjmp	.+62     	; 0x288 <decrement+0x72>
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	91 05       	cpc	r25, r1
     24e:	91 f0       	breq	.+36     	; 0x274 <decrement+0x5e>
     250:	04 97       	sbiw	r24, 0x04	; 4
     252:	a9 f0       	breq	.+42     	; 0x27e <decrement+0x68>
     254:	19 c0       	rjmp	.+50     	; 0x288 <decrement+0x72>
	{
		case 0:
		
		i=mas0;
     256:	80 91 28 02 	lds	r24, 0x0228
     25a:	90 91 29 02 	lds	r25, 0x0229
		break;
     25e:	1e c0       	rjmp	.+60     	; 0x29c <decrement+0x86>
		case 1:
		i=mas1;
     260:	80 91 2c 02 	lds	r24, 0x022C
     264:	90 91 2d 02 	lds	r25, 0x022D
		break;
     268:	19 c0       	rjmp	.+50     	; 0x29c <decrement+0x86>
		case 2:
		i=mas2;
     26a:	80 91 24 02 	lds	r24, 0x0224
     26e:	90 91 25 02 	lds	r25, 0x0225
		break;
     272:	14 c0       	rjmp	.+40     	; 0x29c <decrement+0x86>
		case 3:
		i=mas3;
     274:	80 91 2a 02 	lds	r24, 0x022A
     278:	90 91 2b 02 	lds	r25, 0x022B
		break;
     27c:	0f c0       	rjmp	.+30     	; 0x29c <decrement+0x86>
		case 4:
		i=mas4;
     27e:	80 91 38 02 	lds	r24, 0x0238
     282:	90 91 39 02 	lds	r25, 0x0239
		break;
     286:	0a c0       	rjmp	.+20     	; 0x29c <decrement+0x86>
		default:
		k=4;
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	90 93 12 01 	sts	0x0112, r25
     290:	80 93 11 01 	sts	0x0111, r24
		i=mas4;
     294:	80 91 38 02 	lds	r24, 0x0238
     298:	90 91 39 02 	lds	r25, 0x0239
		break;
	}
	OCR1A = i;
     29c:	9b bd       	out	0x2b, r25	; 43
     29e:	8a bd       	out	0x2a, r24	; 42
	/* Restore global interrupt flag */
	SREG = sreg;
     2a0:	2f bf       	out	0x3f, r18	; 63
	sei();
     2a2:	78 94       	sei
     2a4:	08 95       	ret

000002a6 <increment>:
void increment(void)
{
	unsigned char sreg;
	unsigned int i=0;
	/* Save global interrupt flag */
	k++;
     2a6:	80 91 11 01 	lds	r24, 0x0111
     2aa:	90 91 12 01 	lds	r25, 0x0112
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	90 93 12 01 	sts	0x0112, r25
     2b4:	80 93 11 01 	sts	0x0111, r24
	sreg = SREG;
     2b8:	2f b7       	in	r18, 0x3f	; 63
	/* Disable interrupts */
	cli();
     2ba:	f8 94       	cli
	/* Set TCNTn to i */
	i=OCR1A;
     2bc:	8a b5       	in	r24, 0x2a	; 42
     2be:	9b b5       	in	r25, 0x2b	; 43
	
	switch (k)
     2c0:	80 91 11 01 	lds	r24, 0x0111
     2c4:	90 91 12 01 	lds	r25, 0x0112
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	91 05       	cpc	r25, r1
     2cc:	b1 f0       	breq	.+44     	; 0x2fa <increment+0x54>
     2ce:	28 f4       	brcc	.+10     	; 0x2da <increment+0x34>
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	49 f0       	breq	.+18     	; 0x2e6 <increment+0x40>
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	61 f0       	breq	.+24     	; 0x2f0 <increment+0x4a>
     2d8:	1f c0       	rjmp	.+62     	; 0x318 <increment+0x72>
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	91 05       	cpc	r25, r1
     2de:	91 f0       	breq	.+36     	; 0x304 <increment+0x5e>
     2e0:	04 97       	sbiw	r24, 0x04	; 4
     2e2:	a9 f0       	breq	.+42     	; 0x30e <increment+0x68>
     2e4:	19 c0       	rjmp	.+50     	; 0x318 <increment+0x72>
	{
		case 0:
		
		i=mas0;
     2e6:	80 91 28 02 	lds	r24, 0x0228
     2ea:	90 91 29 02 	lds	r25, 0x0229
		break;
     2ee:	1c c0       	rjmp	.+56     	; 0x328 <increment+0x82>
		case 1:
		
		i=mas1;
     2f0:	80 91 2c 02 	lds	r24, 0x022C
     2f4:	90 91 2d 02 	lds	r25, 0x022D
		break;
     2f8:	17 c0       	rjmp	.+46     	; 0x328 <increment+0x82>
		case 2:
		
		i=mas2;
     2fa:	80 91 24 02 	lds	r24, 0x0224
     2fe:	90 91 25 02 	lds	r25, 0x0225
		break;
     302:	12 c0       	rjmp	.+36     	; 0x328 <increment+0x82>
		case 3:
		
		i=mas3;
     304:	80 91 2a 02 	lds	r24, 0x022A
     308:	90 91 2b 02 	lds	r25, 0x022B
		break;
     30c:	0d c0       	rjmp	.+26     	; 0x328 <increment+0x82>
		case 4:
		
		i=mas4;
     30e:	80 91 38 02 	lds	r24, 0x0238
     312:	90 91 39 02 	lds	r25, 0x0239
		break;
     316:	08 c0       	rjmp	.+16     	; 0x328 <increment+0x82>
		default:
		
		k=0;
     318:	10 92 12 01 	sts	0x0112, r1
     31c:	10 92 11 01 	sts	0x0111, r1
		i=mas0;
     320:	80 91 28 02 	lds	r24, 0x0228
     324:	90 91 29 02 	lds	r25, 0x0229
		break;
	}
	OCR1A = i;
     328:	9b bd       	out	0x2b, r25	; 43
     32a:	8a bd       	out	0x2a, r24	; 42
	/* Restore global interrupt flag */
	SREG = sreg;
     32c:	2f bf       	out	0x3f, r18	; 63
	sei();
     32e:	78 94       	sei
     330:	08 95       	ret

00000332 <__vector_30>:
}

ISR(USART1_RX_vect) // прерывания для UART
{
     332:	1f 92       	push	r1
     334:	0f 92       	push	r0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	0f 92       	push	r0
     33a:	11 24       	eor	r1, r1
     33c:	0b b6       	in	r0, 0x3b	; 59
     33e:	0f 92       	push	r0
     340:	2f 93       	push	r18
     342:	3f 93       	push	r19
     344:	4f 93       	push	r20
     346:	5f 93       	push	r21
     348:	6f 93       	push	r22
     34a:	7f 93       	push	r23
     34c:	8f 93       	push	r24
     34e:	9f 93       	push	r25
     350:	af 93       	push	r26
     352:	bf 93       	push	r27
     354:	ef 93       	push	r30
     356:	ff 93       	push	r31
	read_mass(UART1_Receive());
     358:	db de       	rcall	.-586    	; 0x110 <UART1_Receive>
     35a:	f7 de       	rcall	.-530    	; 0x14a <read_mass>
}
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	bf 91       	pop	r27
     362:	af 91       	pop	r26
     364:	9f 91       	pop	r25
     366:	8f 91       	pop	r24
     368:	7f 91       	pop	r23
     36a:	6f 91       	pop	r22
     36c:	5f 91       	pop	r21
     36e:	4f 91       	pop	r20
     370:	3f 91       	pop	r19
     372:	2f 91       	pop	r18
     374:	0f 90       	pop	r0
     376:	0b be       	out	0x3b, r0	; 59
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <__vector_12>:

ISR (TIMER1_COMPA_vect)
{
     382:	1f 92       	push	r1
     384:	0f 92       	push	r0
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	0f 92       	push	r0
     38a:	11 24       	eor	r1, r1
     38c:	8f 93       	push	r24
     38e:	9f 93       	push	r25
	cntB++;
     390:	80 91 1f 01 	lds	r24, 0x011F
     394:	90 91 20 01 	lds	r25, 0x0120
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	90 93 20 01 	sts	0x0120, r25
     39e:	80 93 1f 01 	sts	0x011F, r24
	
}
     3a2:	9f 91       	pop	r25
     3a4:	8f 91       	pop	r24
     3a6:	0f 90       	pop	r0
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	0f 90       	pop	r0
     3ac:	1f 90       	pop	r1
     3ae:	18 95       	reti

000003b0 <__vector_15>:

ISR(TIMER0_COMP_vect)
{
     3b0:	1f 92       	push	r1
     3b2:	0f 92       	push	r0
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	0f 92       	push	r0
     3b8:	11 24       	eor	r1, r1
     3ba:	2f 93       	push	r18
     3bc:	3f 93       	push	r19
     3be:	4f 93       	push	r20
     3c0:	5f 93       	push	r21
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
	if (glub==0){w=datglub;q=datmetki;metki=0;}
     3c6:	20 91 1b 01 	lds	r18, 0x011B
     3ca:	30 91 1c 01 	lds	r19, 0x011C
     3ce:	21 15       	cp	r18, r1
     3d0:	31 05       	cpc	r19, r1
     3d2:	a1 f4       	brne	.+40     	; 0x3fc <__vector_15+0x4c>
     3d4:	80 91 0d 01 	lds	r24, 0x010D
     3d8:	90 91 0e 01 	lds	r25, 0x010E
     3dc:	90 93 03 01 	sts	0x0103, r25
     3e0:	80 93 02 01 	sts	0x0102, r24
     3e4:	80 91 0f 01 	lds	r24, 0x010F
     3e8:	90 91 10 01 	lds	r25, 0x0110
     3ec:	90 93 01 01 	sts	0x0101, r25
     3f0:	80 93 00 01 	sts	0x0100, r24
     3f4:	10 92 1a 01 	sts	0x011A, r1
     3f8:	10 92 19 01 	sts	0x0119, r1
	cntAA++;
     3fc:	80 91 0b 01 	lds	r24, 0x010B
     400:	90 91 0c 01 	lds	r25, 0x010C
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	90 93 0c 01 	sts	0x010C, r25
     40a:	80 93 0b 01 	sts	0x010B, r24
	if (cntAA==0){w=datglub;q=datmetki;}
     40e:	00 97       	sbiw	r24, 0x00	; 0
     410:	81 f4       	brne	.+32     	; 0x432 <__vector_15+0x82>
     412:	40 91 0d 01 	lds	r20, 0x010D
     416:	50 91 0e 01 	lds	r21, 0x010E
     41a:	50 93 03 01 	sts	0x0103, r21
     41e:	40 93 02 01 	sts	0x0102, r20
     422:	40 91 0f 01 	lds	r20, 0x010F
     426:	50 91 10 01 	lds	r21, 0x0110
     42a:	50 93 01 01 	sts	0x0101, r21
     42e:	40 93 00 01 	sts	0x0100, r20
	
	
	if (w==cntAA) {glub++;w=w+datglub;}
     432:	40 91 02 01 	lds	r20, 0x0102
     436:	50 91 03 01 	lds	r21, 0x0103
     43a:	84 17       	cp	r24, r20
     43c:	95 07       	cpc	r25, r21
     43e:	81 f4       	brne	.+32     	; 0x460 <__vector_15+0xb0>
     440:	2f 5f       	subi	r18, 0xFF	; 255
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	30 93 1c 01 	sts	0x011C, r19
     448:	20 93 1b 01 	sts	0x011B, r18
     44c:	20 91 0d 01 	lds	r18, 0x010D
     450:	30 91 0e 01 	lds	r19, 0x010E
     454:	82 0f       	add	r24, r18
     456:	93 1f       	adc	r25, r19
     458:	90 93 03 01 	sts	0x0103, r25
     45c:	80 93 02 01 	sts	0x0102, r24
	if (q==glub) {metki++;q=q+datmetki;}
     460:	80 91 00 01 	lds	r24, 0x0100
     464:	90 91 01 01 	lds	r25, 0x0101
     468:	20 91 1b 01 	lds	r18, 0x011B
     46c:	30 91 1c 01 	lds	r19, 0x011C
     470:	82 17       	cp	r24, r18
     472:	93 07       	cpc	r25, r19
     474:	a1 f4       	brne	.+40     	; 0x49e <__vector_15+0xee>
     476:	20 91 19 01 	lds	r18, 0x0119
     47a:	30 91 1a 01 	lds	r19, 0x011A
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	30 93 1a 01 	sts	0x011A, r19
     486:	20 93 19 01 	sts	0x0119, r18
     48a:	20 91 0f 01 	lds	r18, 0x010F
     48e:	30 91 10 01 	lds	r19, 0x0110
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	90 93 01 01 	sts	0x0101, r25
     49a:	80 93 00 01 	sts	0x0100, r24
}
     49e:	9f 91       	pop	r25
     4a0:	8f 91       	pop	r24
     4a2:	5f 91       	pop	r21
     4a4:	4f 91       	pop	r20
     4a6:	3f 91       	pop	r19
     4a8:	2f 91       	pop	r18
     4aa:	0f 90       	pop	r0
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	0f 90       	pop	r0
     4b0:	1f 90       	pop	r1
     4b2:	18 95       	reti

000004b4 <__vector_8>:

ISR (INT7_vect)
{
     4b4:	1f 92       	push	r1
     4b6:	0f 92       	push	r0
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	0f 92       	push	r0
     4bc:	11 24       	eor	r1, r1
     4be:	0b b6       	in	r0, 0x3b	; 59
     4c0:	0f 92       	push	r0
     4c2:	2f 93       	push	r18
     4c4:	3f 93       	push	r19
     4c6:	4f 93       	push	r20
     4c8:	5f 93       	push	r21
     4ca:	6f 93       	push	r22
     4cc:	7f 93       	push	r23
     4ce:	8f 93       	push	r24
     4d0:	9f 93       	push	r25
     4d2:	af 93       	push	r26
     4d4:	bf 93       	push	r27
     4d6:	ef 93       	push	r30
     4d8:	ff 93       	push	r31
	
	//if (1<<PINE7)
	//{
	j++;
     4da:	80 91 09 01 	lds	r24, 0x0109
     4de:	90 91 0a 01 	lds	r25, 0x010A
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	90 93 0a 01 	sts	0x010A, r25
     4e8:	80 93 09 01 	sts	0x0109, r24
	
	if (j>2)
     4ec:	03 97       	sbiw	r24, 0x03	; 3
     4ee:	2c f0       	brlt	.+10     	; 0x4fa <__vector_8+0x46>
	{
		//UART1_Transmit('*');
		increment();
     4f0:	da de       	rcall	.-588    	; 0x2a6 <increment>
		//_delay_ms(10);
		j=0;
     4f2:	10 92 0a 01 	sts	0x010A, r1
     4f6:	10 92 09 01 	sts	0x0109, r1
	}
	
	//}
}
     4fa:	ff 91       	pop	r31
     4fc:	ef 91       	pop	r30
     4fe:	bf 91       	pop	r27
     500:	af 91       	pop	r26
     502:	9f 91       	pop	r25
     504:	8f 91       	pop	r24
     506:	7f 91       	pop	r23
     508:	6f 91       	pop	r22
     50a:	5f 91       	pop	r21
     50c:	4f 91       	pop	r20
     50e:	3f 91       	pop	r19
     510:	2f 91       	pop	r18
     512:	0f 90       	pop	r0
     514:	0b be       	out	0x3b, r0	; 59
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_7>:

ISR (INT6_vect)
{
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	0b b6       	in	r0, 0x3b	; 59
     52c:	0f 92       	push	r0
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	4f 93       	push	r20
     534:	5f 93       	push	r21
     536:	6f 93       	push	r22
     538:	7f 93       	push	r23
     53a:	8f 93       	push	r24
     53c:	9f 93       	push	r25
     53e:	af 93       	push	r26
     540:	bf 93       	push	r27
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
	
	//if (1<<PINE6)
	//{
	i++;
     546:	80 91 07 01 	lds	r24, 0x0107
     54a:	90 91 08 01 	lds	r25, 0x0108
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	90 93 08 01 	sts	0x0108, r25
     554:	80 93 07 01 	sts	0x0107, r24
	
	if (i>2)
     558:	03 97       	sbiw	r24, 0x03	; 3
     55a:	2c f0       	brlt	.+10     	; 0x566 <__vector_7+0x46>
	
	{
		//_delay_ms(500);
		//UART1_Transmit('*');
		decrement();
     55c:	5c de       	rcall	.-840    	; 0x216 <decrement>
		//_delay_ms(10);
		i=0;
     55e:	10 92 08 01 	sts	0x0108, r1
     562:	10 92 07 01 	sts	0x0107, r1
	}
	
	
	//}
}
     566:	ff 91       	pop	r31
     568:	ef 91       	pop	r30
     56a:	bf 91       	pop	r27
     56c:	af 91       	pop	r26
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	7f 91       	pop	r23
     574:	6f 91       	pop	r22
     576:	5f 91       	pop	r21
     578:	4f 91       	pop	r20
     57a:	3f 91       	pop	r19
     57c:	2f 91       	pop	r18
     57e:	0f 90       	pop	r0
     580:	0b be       	out	0x3b, r0	; 59
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <__vector_21>:

ISR (ADC_vect)
{
     58c:	1f 92       	push	r1
     58e:	0f 92       	push	r0
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	0f 92       	push	r0
     594:	11 24       	eor	r1, r1
     596:	0b b6       	in	r0, 0x3b	; 59
     598:	0f 92       	push	r0
     59a:	2f 93       	push	r18
     59c:	3f 93       	push	r19
     59e:	4f 93       	push	r20
     5a0:	5f 93       	push	r21
     5a2:	6f 93       	push	r22
     5a4:	7f 93       	push	r23
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
	
	switch (n)
     5b2:	80 91 05 01 	lds	r24, 0x0105
     5b6:	90 91 06 01 	lds	r25, 0x0106
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	91 05       	cpc	r25, r1
     5be:	09 f1       	breq	.+66     	; 0x602 <__vector_21+0x76>
     5c0:	1c f4       	brge	.+6      	; 0x5c8 <__vector_21+0x3c>
     5c2:	89 2b       	or	r24, r25
     5c4:	41 f0       	breq	.+16     	; 0x5d6 <__vector_21+0x4a>
     5c6:	66 c0       	rjmp	.+204    	; 0x694 <__vector_21+0x108>
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	91 05       	cpc	r25, r1
     5cc:	79 f1       	breq	.+94     	; 0x62c <__vector_21+0xa0>
     5ce:	03 97       	sbiw	r24, 0x03	; 3
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <__vector_21+0x48>
     5d2:	46 c0       	rjmp	.+140    	; 0x660 <__vector_21+0xd4>
     5d4:	5f c0       	rjmp	.+190    	; 0x694 <__vector_21+0x108>
	{
		case 0:
		
		volt = ADC;// измеряем 0 канал АЦП
     5d6:	84 b1       	in	r24, 0x04	; 4
     5d8:	95 b1       	in	r25, 0x05	; 5
		volt=(volt*6);
     5da:	9c 01       	movw	r18, r24
     5dc:	22 0f       	add	r18, r18
     5de:	33 1f       	adc	r19, r19
     5e0:	82 0f       	add	r24, r18
     5e2:	93 1f       	adc	r25, r19
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	90 93 18 01 	sts	0x0118, r25
     5ec:	80 93 17 01 	sts	0x0117, r24
		
		ADMUX =0x41;// переключаем АЦП на вход ADC1
     5f0:	81 e4       	ldi	r24, 0x41	; 65
     5f2:	87 b9       	out	0x07, r24	; 7
		n = 1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	90 93 06 01 	sts	0x0106, r25
     5fc:	80 93 05 01 	sts	0x0105, r24
		break;
     600:	49 c0       	rjmp	.+146    	; 0x694 <__vector_21+0x108>
		
		case 1:
		
		amper = ADC;// измеряем 1 канал АЦП
     602:	24 b1       	in	r18, 0x04	; 4
     604:	35 b1       	in	r19, 0x05	; 5
		amper=(amper*26);
     606:	4a e1       	ldi	r20, 0x1A	; 26
     608:	42 9f       	mul	r20, r18
     60a:	c0 01       	movw	r24, r0
     60c:	43 9f       	mul	r20, r19
     60e:	90 0d       	add	r25, r0
     610:	11 24       	eor	r1, r1
     612:	90 93 16 01 	sts	0x0116, r25
     616:	80 93 15 01 	sts	0x0115, r24
		
		ADMUX =0x42;// переключаем АЦП на вход ADC5
     61a:	82 e4       	ldi	r24, 0x42	; 66
     61c:	87 b9       	out	0x07, r24	; 7
		n = 2;
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	90 93 06 01 	sts	0x0106, r25
     626:	80 93 05 01 	sts	0x0105, r24
		break;
     62a:	34 c0       	rjmp	.+104    	; 0x694 <__vector_21+0x108>
		
		case 2:
		datglub=ADC;
     62c:	84 b1       	in	r24, 0x04	; 4
     62e:	95 b1       	in	r25, 0x05	; 5
		//a=(0.0130864*datglub*datglub*datglub-0.05629629*datglub*datglub+0.154320972*datglub+1)*500;
		datglub=datglub*10;
     630:	9c 01       	movw	r18, r24
     632:	22 0f       	add	r18, r18
     634:	33 1f       	adc	r19, r19
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	82 0f       	add	r24, r18
     644:	93 1f       	adc	r25, r19
     646:	90 93 0e 01 	sts	0x010E, r25
     64a:	80 93 0d 01 	sts	0x010D, r24
		ADMUX =0x43;// переключаем АЦП на вход ADC6
     64e:	83 e4       	ldi	r24, 0x43	; 67
     650:	87 b9       	out	0x07, r24	; 7
		n = 3;
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	90 93 06 01 	sts	0x0106, r25
     65a:	80 93 05 01 	sts	0x0105, r24
		break;
     65e:	1a c0       	rjmp	.+52     	; 0x694 <__vector_21+0x108>
		
		case 3:
		datmetki=ADC;
     660:	64 b1       	in	r22, 0x04	; 4
     662:	75 b1       	in	r23, 0x05	; 5
		//b=(0.0130864*datmetki*datmetki*datmetki-0.05629629*datmetki*datmetki+0.154320972*datmetki+1)*500;
		datmetki=datmetki*0.04+80;
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0f d4       	rcall	.+2078   	; 0xe88 <__floatunsisf>
     66a:	2a e0       	ldi	r18, 0x0A	; 10
     66c:	37 ed       	ldi	r19, 0xD7	; 215
     66e:	43 e2       	ldi	r20, 0x23	; 35
     670:	5d e3       	ldi	r21, 0x3D	; 61
     672:	98 d4       	rcall	.+2352   	; 0xfa4 <__mulsf3>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 ea       	ldi	r20, 0xA0	; 160
     67a:	52 e4       	ldi	r21, 0x42	; 66
     67c:	75 d3       	rcall	.+1770   	; 0xd68 <__addsf3>
     67e:	d8 d3       	rcall	.+1968   	; 0xe30 <__fixunssfsi>
     680:	70 93 10 01 	sts	0x0110, r23
     684:	60 93 0f 01 	sts	0x010F, r22
		ADMUX =0x40;// переключаем АЦП на вход ADC0
     688:	80 e4       	ldi	r24, 0x40	; 64
     68a:	87 b9       	out	0x07, r24	; 7
		n = 0;
     68c:	10 92 06 01 	sts	0x0106, r1
     690:	10 92 05 01 	sts	0x0105, r1
		break;
	}
	
	ADCSRA|=(1<<ADSC);
     694:	36 9a       	sbi	0x06, 6	; 6
	
}
     696:	ff 91       	pop	r31
     698:	ef 91       	pop	r30
     69a:	bf 91       	pop	r27
     69c:	af 91       	pop	r26
     69e:	9f 91       	pop	r25
     6a0:	8f 91       	pop	r24
     6a2:	7f 91       	pop	r23
     6a4:	6f 91       	pop	r22
     6a6:	5f 91       	pop	r21
     6a8:	4f 91       	pop	r20
     6aa:	3f 91       	pop	r19
     6ac:	2f 91       	pop	r18
     6ae:	0f 90       	pop	r0
     6b0:	0b be       	out	0x3b, r0	; 59
     6b2:	0f 90       	pop	r0
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	0f 90       	pop	r0
     6b8:	1f 90       	pop	r1
     6ba:	18 95       	reti

000006bc <main>:



int main(void)
{
    mas0=0x61A8;
     6bc:	88 ea       	ldi	r24, 0xA8	; 168
     6be:	91 e6       	ldi	r25, 0x61	; 97
     6c0:	90 93 29 02 	sts	0x0229, r25
     6c4:	80 93 28 02 	sts	0x0228, r24
	mas1=0x09C4;
     6c8:	84 ec       	ldi	r24, 0xC4	; 196
     6ca:	99 e0       	ldi	r25, 0x09	; 9
     6cc:	90 93 2d 02 	sts	0x022D, r25
     6d0:	80 93 2c 02 	sts	0x022C, r24
	mas2=0x00F9;
     6d4:	89 ef       	ldi	r24, 0xF9	; 249
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	90 93 25 02 	sts	0x0225, r25
     6dc:	80 93 24 02 	sts	0x0224, r24
	mas3=0x0018;
     6e0:	88 e1       	ldi	r24, 0x18	; 24
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	90 93 2b 02 	sts	0x022B, r25
     6e8:	80 93 2a 02 	sts	0x022A, r24
	mas4=0x0004;
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	90 93 39 02 	sts	0x0239, r25
     6f4:	80 93 38 02 	sts	0x0238, r24
	
	cli();
     6f8:	f8 94       	cli
    
    PORT_Init();
     6fa:	3d dd       	rcall	.-1414   	; 0x176 <PORT_Init>
	
	//_delay_us(1000);
	USART1_Init(103);
     6fc:	87 e6       	ldi	r24, 0x67	; 103
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	4b dd       	rcall	.-1386   	; 0x198 <USART1_Init>
	ADC_init();
     702:	59 dd       	rcall	.-1358   	; 0x1b6 <ADC_init>
	timer0_init();
     704:	5e dd       	rcall	.-1348   	; 0x1c2 <timer0_init>
	timer1_init();
     706:	6b dd       	rcall	.-1322   	; 0x1de <timer1_init>
	//timer3_init();
	BUTTON();
     708:	7f dd       	rcall	.-1282   	; 0x208 <BUTTON>
	
	//int i=0;
	
	//Trmass("hello",CR);
	
	sei();
     70a:	78 94       	sei
	//_delay_us(1000);
	/*cntA1=cntA;
	cntB1=cntB;*/
	int Rec=0;
	metki=0;glub=0;
     70c:	10 92 1a 01 	sts	0x011A, r1
     710:	10 92 19 01 	sts	0x0119, r1
     714:	10 92 1c 01 	sts	0x011C, r1
     718:	10 92 1b 01 	sts	0x011B, r1
	
	sei();
	//_delay_us(1000);
	/*cntA1=cntA;
	cntB1=cntB;*/
	int Rec=0;
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
				//_delay_us(50);
			//UART1_Transmit('2');
				if (glavmas[Rec] == CR)
				{
					//UART1_Transmit('1');
					switch (glavmas[0])
     720:	c3 e2       	ldi	r28, 0x23	; 35
     722:	d1 e0       	ldi	r29, 0x01	; 1
								default: UART1_Transmit('?');break;
							}
					break;
					
					case 'B':
							switch (glavmas[1])
     724:	04 e2       	ldi	r16, 0x24	; 36
     726:	11 e0       	ldi	r17, 0x01	; 1
								break;
								case 'F':
								cntB1=cntB;
								cntA1=cntAA;
								ascii_8(cntB1>>8);
								ascii_8(cntB1);
     728:	0f 2e       	mov	r0, r31
     72a:	fd e1       	ldi	r31, 0x1D	; 29
     72c:	ef 2e       	mov	r14, r31
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	ff 2e       	mov	r15, r31
     732:	f0 2d       	mov	r31, r0
								//UART1_Transmit(' ');
								ascii_8(cntB1>>8);
								ascii_8(cntB1);
								//UART1_Transmit(' ');
								ascii_8(cntA1>>8);
								ascii_8(cntA1);
     734:	0f 2e       	mov	r0, r31
     736:	f1 e2       	ldi	r31, 0x21	; 33
     738:	af 2e       	mov	r10, r31
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	bf 2e       	mov	r11, r31
     73e:	f0 2d       	mov	r31, r0
								//ctrl=0xFF-(3*(((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F)))+((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F)));
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F));
								ctrl=0xFF-ctrl;
     740:	cc 24       	eor	r12, r12
     742:	ca 94       	dec	r12
     744:	d1 2c       	mov	r13, r1
								//UART1_Transmit(' ');
								ascii_8(cntA1>>8);
								ascii_8(cntA1);
								//UART1_Transmit(' ');
								
								ascii_8(ctrl);
     746:	0f 2e       	mov	r0, r31
     748:	f6 e2       	ldi	r31, 0x26	; 38
     74a:	2f 2e       	mov	r2, r31
     74c:	f2 e0       	ldi	r31, 0x02	; 2
     74e:	3f 2e       	mov	r3, r31
     750:	f0 2d       	mov	r31, r0
								UART1_Transmit(CR);*/
								break;
								case 'C':
								glubina=glub;
								ascii_8(glubina>>8);
								ascii_8(glubina);
     752:	0f 2e       	mov	r0, r31
     754:	f3 e1       	ldi	r31, 0x13	; 19
     756:	8f 2e       	mov	r8, r31
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	9f 2e       	mov	r9, r31
     75c:	f0 2d       	mov	r31, r0
								break;
								case 'F':
								//UART1_Transmit('A');
								//UART1_Transmit('F');
								ascii_8(amper>>8);
								ascii_8(amper);
     75e:	0f 2e       	mov	r0, r31
     760:	f5 e1       	ldi	r31, 0x15	; 21
     762:	4f 2e       	mov	r4, r31
     764:	f1 e0       	ldi	r31, 0x01	; 1
     766:	5f 2e       	mov	r5, r31
     768:	f0 2d       	mov	r31, r0
								break;
								case 'E':
								//UART1_Transmit('A');
								//UART1_Transmit('E');
								ascii_8(volt>>8);
								ascii_8(volt);
     76a:	0f 2e       	mov	r0, r31
     76c:	f7 e1       	ldi	r31, 0x17	; 23
     76e:	6f 2e       	mov	r6, r31
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	7f 2e       	mov	r7, r31
     774:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     776:	8f e8       	ldi	r24, 0x8F	; 143
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <main+0xbe>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <main+0xc4>
     780:	00 00       	nop
			}
			if ((j<4)&&(0<<INTF7))
			{
				j=0;
			}
			if (Priem == 1)
     782:	80 91 22 02 	lds	r24, 0x0222
     786:	90 91 23 02 	lds	r25, 0x0223
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	a1 f7       	brne	.-24     	; 0x776 <main+0xba>
			{
				//_delay_us(50);
			//UART1_Transmit('2');
				if (glavmas[Rec] == CR)
     78e:	f9 01       	movw	r30, r18
     790:	ed 5d       	subi	r30, 0xDD	; 221
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	80 81       	ld	r24, Z
     796:	8d 30       	cpi	r24, 0x0D	; 13
     798:	09 f0       	breq	.+2      	; 0x79c <main+0xe0>
     79a:	e2 c2       	rjmp	.+1476   	; 0xd60 <main+0x6a4>
				{
					//UART1_Transmit('1');
					switch (glavmas[0])
     79c:	88 81       	ld	r24, Y
     79e:	82 34       	cpi	r24, 0x42	; 66
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <main+0xe8>
     7a2:	e7 c0       	rjmp	.+462    	; 0x972 <main+0x2b6>
     7a4:	18 f4       	brcc	.+6      	; 0x7ac <main+0xf0>
     7a6:	81 34       	cpi	r24, 0x41	; 65
     7a8:	41 f0       	breq	.+16     	; 0x7ba <main+0xfe>
     7aa:	d1 c2       	rjmp	.+1442   	; 0xd4e <main+0x692>
     7ac:	83 34       	cpi	r24, 0x43	; 67
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <main+0xf6>
     7b0:	56 c2       	rjmp	.+1196   	; 0xc5e <main+0x5a2>
     7b2:	84 34       	cpi	r24, 0x44	; 68
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <main+0xfc>
     7b6:	59 c2       	rjmp	.+1202   	; 0xc6a <main+0x5ae>
     7b8:	ca c2       	rjmp	.+1428   	; 0xd4e <main+0x692>
					{
					case 'A':  // проверяем первый символ
							
							switch (glavmas[1])
     7ba:	f8 01       	movw	r30, r16
     7bc:	80 81       	ld	r24, Z
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	fc 01       	movw	r30, r24
     7c2:	e1 54       	subi	r30, 0x41	; 65
     7c4:	f1 09       	sbc	r31, r1
     7c6:	e5 31       	cpi	r30, 0x15	; 21
     7c8:	f1 05       	cpc	r31, r1
     7ca:	08 f0       	brcs	.+2      	; 0x7ce <main+0x112>
     7cc:	cf c0       	rjmp	.+414    	; 0x96c <main+0x2b0>
     7ce:	ea 5b       	subi	r30, 0xBA	; 186
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	4b c4       	rjmp	.+2198   	; 0x106a <__tablejump2__>
							{
								case 'A':
								//UART1_Transmit('A');
								//UART1_Transmit('A');
								ascii_8(volt>>8);
     7d4:	80 91 18 01 	lds	r24, 0x0118
     7d8:	ae dc       	rcall	.-1700   	; 0x136 <ascii_8>
								ascii_8(volt);
     7da:	f3 01       	movw	r30, r6
     7dc:	80 81       	ld	r24, Z
     7de:	ab dc       	rcall	.-1706   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ctrl=((volt>>12)&(0x000F))+((volt>>8)&(0x000F))+((volt>>4)&(0x000F))+((volt)&(0x000F));
     7e0:	80 91 17 01 	lds	r24, 0x0117
     7e4:	90 91 18 01 	lds	r25, 0x0118
     7e8:	ac 01       	movw	r20, r24
     7ea:	4f 70       	andi	r20, 0x0F	; 15
     7ec:	55 27       	eor	r21, r21
     7ee:	9c 01       	movw	r18, r24
     7f0:	23 2f       	mov	r18, r19
     7f2:	33 27       	eor	r19, r19
     7f4:	22 95       	swap	r18
     7f6:	2f 70       	andi	r18, 0x0F	; 15
     7f8:	42 0f       	add	r20, r18
     7fa:	53 1f       	adc	r21, r19
     7fc:	29 2f       	mov	r18, r25
     7fe:	33 27       	eor	r19, r19
     800:	2f 70       	andi	r18, 0x0F	; 15
     802:	33 27       	eor	r19, r19
     804:	24 0f       	add	r18, r20
     806:	35 1f       	adc	r19, r21
     808:	92 95       	swap	r25
     80a:	82 95       	swap	r24
     80c:	8f 70       	andi	r24, 0x0F	; 15
     80e:	89 27       	eor	r24, r25
     810:	9f 70       	andi	r25, 0x0F	; 15
     812:	89 27       	eor	r24, r25
     814:	8f 70       	andi	r24, 0x0F	; 15
     816:	99 27       	eor	r25, r25
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
								ctrl=0xFF-ctrl;
     81c:	96 01       	movw	r18, r12
     81e:	28 1b       	sub	r18, r24
     820:	39 0b       	sbc	r19, r25
     822:	c9 01       	movw	r24, r18
     824:	30 93 27 02 	sts	0x0227, r19
     828:	20 93 26 02 	sts	0x0226, r18
								ascii_8(ctrl);
     82c:	84 dc       	rcall	.-1784   	; 0x136 <ascii_8>
								UART1_Transmit('*');
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	67 dc       	rcall	.-1842   	; 0x100 <UART1_Transmit>
								break;
     832:	8f c2       	rjmp	.+1310   	; 0xd52 <main+0x696>
								case 'E':
								//UART1_Transmit('A');
								//UART1_Transmit('E');
								ascii_8(volt>>8);
     834:	80 91 18 01 	lds	r24, 0x0118
     838:	7e dc       	rcall	.-1796   	; 0x136 <ascii_8>
								ascii_8(volt);
     83a:	f3 01       	movw	r30, r6
     83c:	80 81       	ld	r24, Z
     83e:	7b dc       	rcall	.-1802   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ctrl=((volt>>12)&(0x000F))+((volt>>8)&(0x000F))+((volt>>4)&(0x000F))+((volt)&(0x000F));
     840:	80 91 17 01 	lds	r24, 0x0117
     844:	90 91 18 01 	lds	r25, 0x0118
     848:	ac 01       	movw	r20, r24
     84a:	4f 70       	andi	r20, 0x0F	; 15
     84c:	55 27       	eor	r21, r21
     84e:	9c 01       	movw	r18, r24
     850:	23 2f       	mov	r18, r19
     852:	33 27       	eor	r19, r19
     854:	22 95       	swap	r18
     856:	2f 70       	andi	r18, 0x0F	; 15
     858:	42 0f       	add	r20, r18
     85a:	53 1f       	adc	r21, r19
     85c:	29 2f       	mov	r18, r25
     85e:	33 27       	eor	r19, r19
     860:	2f 70       	andi	r18, 0x0F	; 15
     862:	33 27       	eor	r19, r19
     864:	24 0f       	add	r18, r20
     866:	35 1f       	adc	r19, r21
     868:	92 95       	swap	r25
     86a:	82 95       	swap	r24
     86c:	8f 70       	andi	r24, 0x0F	; 15
     86e:	89 27       	eor	r24, r25
     870:	9f 70       	andi	r25, 0x0F	; 15
     872:	89 27       	eor	r24, r25
     874:	8f 70       	andi	r24, 0x0F	; 15
     876:	99 27       	eor	r25, r25
     878:	82 0f       	add	r24, r18
     87a:	93 1f       	adc	r25, r19
								ctrl=0xFF-ctrl;
     87c:	96 01       	movw	r18, r12
     87e:	28 1b       	sub	r18, r24
     880:	39 0b       	sbc	r19, r25
     882:	c9 01       	movw	r24, r18
     884:	30 93 27 02 	sts	0x0227, r19
     888:	20 93 26 02 	sts	0x0226, r18
								ascii_8(ctrl);
     88c:	54 dc       	rcall	.-1880   	; 0x136 <ascii_8>
								UART1_Transmit('*');
     88e:	8a e2       	ldi	r24, 0x2A	; 42
     890:	37 dc       	rcall	.-1938   	; 0x100 <UART1_Transmit>
								break;
     892:	5f c2       	rjmp	.+1214   	; 0xd52 <main+0x696>
								case 'B':
								//UART1_Transmit('A');
								//UART1_Transmit('B');
								
								ascii_8(amper>>8);
     894:	80 91 16 01 	lds	r24, 0x0116
     898:	4e dc       	rcall	.-1892   	; 0x136 <ascii_8>
								ascii_8(amper);
     89a:	f2 01       	movw	r30, r4
     89c:	80 81       	ld	r24, Z
     89e:	4b dc       	rcall	.-1898   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ctrl=((amper>>12)&(0x000F))+((amper>>8)&(0x000F))+((amper>>4)&(0x000F))+((amper)&(0x000F));
     8a0:	80 91 15 01 	lds	r24, 0x0115
     8a4:	90 91 16 01 	lds	r25, 0x0116
     8a8:	ac 01       	movw	r20, r24
     8aa:	4f 70       	andi	r20, 0x0F	; 15
     8ac:	55 27       	eor	r21, r21
     8ae:	9c 01       	movw	r18, r24
     8b0:	23 2f       	mov	r18, r19
     8b2:	33 27       	eor	r19, r19
     8b4:	22 95       	swap	r18
     8b6:	2f 70       	andi	r18, 0x0F	; 15
     8b8:	42 0f       	add	r20, r18
     8ba:	53 1f       	adc	r21, r19
     8bc:	29 2f       	mov	r18, r25
     8be:	33 27       	eor	r19, r19
     8c0:	2f 70       	andi	r18, 0x0F	; 15
     8c2:	33 27       	eor	r19, r19
     8c4:	24 0f       	add	r18, r20
     8c6:	35 1f       	adc	r19, r21
     8c8:	92 95       	swap	r25
     8ca:	82 95       	swap	r24
     8cc:	8f 70       	andi	r24, 0x0F	; 15
     8ce:	89 27       	eor	r24, r25
     8d0:	9f 70       	andi	r25, 0x0F	; 15
     8d2:	89 27       	eor	r24, r25
     8d4:	8f 70       	andi	r24, 0x0F	; 15
     8d6:	99 27       	eor	r25, r25
     8d8:	82 0f       	add	r24, r18
     8da:	93 1f       	adc	r25, r19
								ctrl=0xFF-ctrl;
     8dc:	96 01       	movw	r18, r12
     8de:	28 1b       	sub	r18, r24
     8e0:	39 0b       	sbc	r19, r25
     8e2:	c9 01       	movw	r24, r18
     8e4:	30 93 27 02 	sts	0x0227, r19
     8e8:	20 93 26 02 	sts	0x0226, r18
								ascii_8(ctrl);
     8ec:	24 dc       	rcall	.-1976   	; 0x136 <ascii_8>
								UART1_Transmit('*');
     8ee:	8a e2       	ldi	r24, 0x2A	; 42
     8f0:	07 dc       	rcall	.-2034   	; 0x100 <UART1_Transmit>
								break;
     8f2:	2f c2       	rjmp	.+1118   	; 0xd52 <main+0x696>
								case 'F':
								//UART1_Transmit('A');
								//UART1_Transmit('F');
								ascii_8(amper>>8);
     8f4:	80 91 16 01 	lds	r24, 0x0116
     8f8:	1e dc       	rcall	.-1988   	; 0x136 <ascii_8>
								ascii_8(amper);
     8fa:	f2 01       	movw	r30, r4
     8fc:	80 81       	ld	r24, Z
     8fe:	1b dc       	rcall	.-1994   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ctrl=((amper>>12)&(0x000F))+((amper>>8)&(0x000F))+((amper>>4)&(0x000F))+((amper)&(0x000F));
     900:	80 91 15 01 	lds	r24, 0x0115
     904:	90 91 16 01 	lds	r25, 0x0116
     908:	ac 01       	movw	r20, r24
     90a:	4f 70       	andi	r20, 0x0F	; 15
     90c:	55 27       	eor	r21, r21
     90e:	9c 01       	movw	r18, r24
     910:	23 2f       	mov	r18, r19
     912:	33 27       	eor	r19, r19
     914:	22 95       	swap	r18
     916:	2f 70       	andi	r18, 0x0F	; 15
     918:	42 0f       	add	r20, r18
     91a:	53 1f       	adc	r21, r19
     91c:	29 2f       	mov	r18, r25
     91e:	33 27       	eor	r19, r19
     920:	2f 70       	andi	r18, 0x0F	; 15
     922:	33 27       	eor	r19, r19
     924:	24 0f       	add	r18, r20
     926:	35 1f       	adc	r19, r21
     928:	92 95       	swap	r25
     92a:	82 95       	swap	r24
     92c:	8f 70       	andi	r24, 0x0F	; 15
     92e:	89 27       	eor	r24, r25
     930:	9f 70       	andi	r25, 0x0F	; 15
     932:	89 27       	eor	r24, r25
     934:	8f 70       	andi	r24, 0x0F	; 15
     936:	99 27       	eor	r25, r25
     938:	82 0f       	add	r24, r18
     93a:	93 1f       	adc	r25, r19
								ctrl=0xFF-ctrl;
     93c:	96 01       	movw	r18, r12
     93e:	28 1b       	sub	r18, r24
     940:	39 0b       	sbc	r19, r25
     942:	c9 01       	movw	r24, r18
     944:	30 93 27 02 	sts	0x0227, r19
     948:	20 93 26 02 	sts	0x0226, r18
								ascii_8(ctrl);
     94c:	f4 db       	rcall	.-2072   	; 0x136 <ascii_8>
								UART1_Transmit('*');
     94e:	8a e2       	ldi	r24, 0x2A	; 42
     950:	d7 db       	rcall	.-2130   	; 0x100 <UART1_Transmit>
								break;
     952:	ff c1       	rjmp	.+1022   	; 0xd52 <main+0x696>
								case 'C':
								UART1_Transmit('*');/*
     954:	8a e2       	ldi	r24, 0x2A	; 42
     956:	d4 db       	rcall	.-2136   	; 0x100 <UART1_Transmit>
								UART1_Transmit('A');
								ascii_8(volt>>8);
								ascii_8(volt);
								UART1_Transmit(CR);*/
								break;
     958:	fc c1       	rjmp	.+1016   	; 0xd52 <main+0x696>
								case 'D':
								UART1_Transmit('*');/*
     95a:	8a e2       	ldi	r24, 0x2A	; 42
     95c:	d1 db       	rcall	.-2142   	; 0x100 <UART1_Transmit>
								UART1_Transmit('A');
								ascii_8(volt>>8);
								ascii_8(volt);
								UART1_Transmit(CR);*/
								break;
     95e:	f9 c1       	rjmp	.+1010   	; 0xd52 <main+0x696>
								case 'I':
								UART1_Transmit('*');/*
     960:	8a e2       	ldi	r24, 0x2A	; 42
     962:	ce db       	rcall	.-2148   	; 0x100 <UART1_Transmit>
								UART1_Transmit('A');
								ascii_8(volt>>8);
								ascii_8(volt);
								UART1_Transmit(CR);*/
								break;
     964:	f6 c1       	rjmp	.+1004   	; 0xd52 <main+0x696>
								case 'U':
								UART1_Transmit('*');/*
     966:	8a e2       	ldi	r24, 0x2A	; 42
     968:	cb db       	rcall	.-2154   	; 0x100 <UART1_Transmit>
								UART1_Transmit('A');
								ascii_8(volt>>8);
								ascii_8(volt);
								UART1_Transmit(CR);*/
								break;
     96a:	f3 c1       	rjmp	.+998    	; 0xd52 <main+0x696>
								default: UART1_Transmit('?');break;
     96c:	8f e3       	ldi	r24, 0x3F	; 63
     96e:	c8 db       	rcall	.-2160   	; 0x100 <UART1_Transmit>
     970:	f0 c1       	rjmp	.+992    	; 0xd52 <main+0x696>
							}
					break;
					
					case 'B':
							switch (glavmas[1])
     972:	f8 01       	movw	r30, r16
     974:	80 81       	ld	r24, Z
     976:	83 34       	cpi	r24, 0x43	; 67
     978:	09 f4       	brne	.+2      	; 0x97c <main+0x2c0>
     97a:	6b c1       	rjmp	.+726    	; 0xc52 <main+0x596>
     97c:	30 f4       	brcc	.+12     	; 0x98a <main+0x2ce>
     97e:	81 34       	cpi	r24, 0x41	; 65
     980:	71 f0       	breq	.+28     	; 0x99e <main+0x2e2>
     982:	82 34       	cpi	r24, 0x42	; 66
     984:	09 f4       	brne	.+2      	; 0x988 <main+0x2cc>
     986:	7c c0       	rjmp	.+248    	; 0xa80 <main+0x3c4>
     988:	67 c1       	rjmp	.+718    	; 0xc58 <main+0x59c>
     98a:	86 34       	cpi	r24, 0x46	; 70
     98c:	09 f4       	brne	.+2      	; 0x990 <main+0x2d4>
     98e:	7b c0       	rjmp	.+246    	; 0xa86 <main+0x3ca>
     990:	88 34       	cpi	r24, 0x48	; 72
     992:	09 f4       	brne	.+2      	; 0x996 <main+0x2da>
     994:	eb c0       	rjmp	.+470    	; 0xb6c <main+0x4b0>
     996:	85 34       	cpi	r24, 0x45	; 69
     998:	09 f0       	breq	.+2      	; 0x99c <main+0x2e0>
     99a:	5e c1       	rjmp	.+700    	; 0xc58 <main+0x59c>
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <main+0x2e8>
							{
								case 'A':
								UART1_Transmit('*');/*
     99e:	8a e2       	ldi	r24, 0x2A	; 42
     9a0:	af db       	rcall	.-2210   	; 0x100 <UART1_Transmit>
								UART1_Transmit('A');
								ascii_8(volt>>8);
								ascii_8(volt);
								UART1_Transmit(CR);*/
								break;
     9a2:	d7 c1       	rjmp	.+942    	; 0xd52 <main+0x696>
								case 'E':
								//UART1_Transmit('B');
								//UART1_Transmit('E');
								
								cntB1=cntB;
     9a4:	40 91 1f 01 	lds	r20, 0x011F
     9a8:	50 91 20 01 	lds	r21, 0x0120
     9ac:	50 93 1e 01 	sts	0x011E, r21
     9b0:	40 93 1d 01 	sts	0x011D, r20
								cntA1=cntAA;
     9b4:	20 91 0b 01 	lds	r18, 0x010B
     9b8:	30 91 0c 01 	lds	r19, 0x010C
     9bc:	30 93 22 01 	sts	0x0122, r19
     9c0:	20 93 21 01 	sts	0x0121, r18
								//ctrl=0xFF;
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
     9c4:	85 2f       	mov	r24, r21
     9c6:	99 27       	eor	r25, r25
     9c8:	fa 01       	movw	r30, r20
     9ca:	ef 70       	andi	r30, 0x0F	; 15
     9cc:	ff 27       	eor	r31, r31
     9ce:	ba 01       	movw	r22, r20
     9d0:	67 2f       	mov	r22, r23
     9d2:	77 27       	eor	r23, r23
     9d4:	62 95       	swap	r22
     9d6:	6f 70       	andi	r22, 0x0F	; 15
     9d8:	e6 0f       	add	r30, r22
     9da:	f7 1f       	adc	r31, r23
     9dc:	bc 01       	movw	r22, r24
     9de:	6f 70       	andi	r22, 0x0F	; 15
     9e0:	77 27       	eor	r23, r23
     9e2:	6e 0f       	add	r22, r30
     9e4:	7f 1f       	adc	r23, r31
     9e6:	52 95       	swap	r21
     9e8:	42 95       	swap	r20
     9ea:	4f 70       	andi	r20, 0x0F	; 15
     9ec:	45 27       	eor	r20, r21
     9ee:	5f 70       	andi	r21, 0x0F	; 15
     9f0:	45 27       	eor	r20, r21
     9f2:	4f 70       	andi	r20, 0x0F	; 15
     9f4:	55 27       	eor	r21, r21
     9f6:	46 0f       	add	r20, r22
     9f8:	57 1f       	adc	r21, r23
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F));
     9fa:	f9 01       	movw	r30, r18
     9fc:	ef 70       	andi	r30, 0x0F	; 15
     9fe:	ff 27       	eor	r31, r31
     a00:	b9 01       	movw	r22, r18
     a02:	67 2f       	mov	r22, r23
     a04:	77 27       	eor	r23, r23
     a06:	62 95       	swap	r22
     a08:	6f 70       	andi	r22, 0x0F	; 15
     a0a:	e6 0f       	add	r30, r22
     a0c:	f7 1f       	adc	r31, r23
     a0e:	63 2f       	mov	r22, r19
     a10:	77 27       	eor	r23, r23
     a12:	6f 70       	andi	r22, 0x0F	; 15
     a14:	77 27       	eor	r23, r23
     a16:	6e 0f       	add	r22, r30
     a18:	7f 1f       	adc	r23, r31
     a1a:	32 95       	swap	r19
     a1c:	22 95       	swap	r18
     a1e:	2f 70       	andi	r18, 0x0F	; 15
     a20:	23 27       	eor	r18, r19
     a22:	3f 70       	andi	r19, 0x0F	; 15
     a24:	23 27       	eor	r18, r19
     a26:	2f 70       	andi	r18, 0x0F	; 15
     a28:	33 27       	eor	r19, r19
     a2a:	26 0f       	add	r18, r22
     a2c:	37 1f       	adc	r19, r23
								cntB1=cntB;
								cntA1=cntAA;
								//ctrl=0xFF;
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
     a2e:	24 0f       	add	r18, r20
     a30:	35 1f       	adc	r19, r21
								
								cntB1=cntB;
								cntA1=cntAA;
								//ctrl=0xFF;
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
     a32:	24 0f       	add	r18, r20
     a34:	35 1f       	adc	r19, r21
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F));
     a36:	42 0f       	add	r20, r18
     a38:	53 1f       	adc	r21, r19
								ctrl=0xFF-ctrl;
     a3a:	96 01       	movw	r18, r12
     a3c:	24 1b       	sub	r18, r20
     a3e:	35 0b       	sbc	r19, r21
     a40:	30 93 27 02 	sts	0x0227, r19
     a44:	20 93 26 02 	sts	0x0226, r18
								ascii_8(cntB1>>8);
     a48:	76 db       	rcall	.-2324   	; 0x136 <ascii_8>
								ascii_8(cntB1);
     a4a:	f7 01       	movw	r30, r14
     a4c:	80 81       	ld	r24, Z
     a4e:	73 db       	rcall	.-2330   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ascii_8(cntB1>>8);
     a50:	80 91 1e 01 	lds	r24, 0x011E
     a54:	70 db       	rcall	.-2336   	; 0x136 <ascii_8>
								ascii_8(cntB1);
     a56:	f7 01       	movw	r30, r14
     a58:	80 81       	ld	r24, Z
     a5a:	6d db       	rcall	.-2342   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ascii_8(cntB1>>8);
     a5c:	80 91 1e 01 	lds	r24, 0x011E
     a60:	6a db       	rcall	.-2348   	; 0x136 <ascii_8>
								ascii_8(cntB1);
     a62:	f7 01       	movw	r30, r14
     a64:	80 81       	ld	r24, Z
     a66:	67 db       	rcall	.-2354   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ascii_8(cntA1>>8);
     a68:	80 91 22 01 	lds	r24, 0x0122
     a6c:	64 db       	rcall	.-2360   	; 0x136 <ascii_8>
								ascii_8(cntA1);
     a6e:	f5 01       	movw	r30, r10
     a70:	80 81       	ld	r24, Z
     a72:	61 db       	rcall	.-2366   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								
								ascii_8(ctrl);
     a74:	f1 01       	movw	r30, r2
     a76:	80 81       	ld	r24, Z
     a78:	5e db       	rcall	.-2372   	; 0x136 <ascii_8>
								UART1_Transmit('*');
     a7a:	8a e2       	ldi	r24, 0x2A	; 42
     a7c:	41 db       	rcall	.-2430   	; 0x100 <UART1_Transmit>
								//cntA1=cntA;
								//cntB1=cntB;
								break;
     a7e:	69 c1       	rjmp	.+722    	; 0xd52 <main+0x696>
								case 'B':
								UART1_Transmit('*');/*
     a80:	8a e2       	ldi	r24, 0x2A	; 42
     a82:	3e db       	rcall	.-2436   	; 0x100 <UART1_Transmit>
								UART1_Transmit('B');
								ascii_8(amper>>8);
								ascii_8(amper);
								UART1_Transmit(CR);*/
								break;
     a84:	66 c1       	rjmp	.+716    	; 0xd52 <main+0x696>
								case 'F':
								cntB1=cntB;
     a86:	90 91 1f 01 	lds	r25, 0x011F
     a8a:	80 91 20 01 	lds	r24, 0x0120
     a8e:	90 93 1d 01 	sts	0x011D, r25
     a92:	80 93 1e 01 	sts	0x011E, r24
								cntA1=cntAA;
     a96:	20 91 0b 01 	lds	r18, 0x010B
     a9a:	30 91 0c 01 	lds	r19, 0x010C
     a9e:	30 93 22 01 	sts	0x0122, r19
     aa2:	20 93 21 01 	sts	0x0121, r18
								ascii_8(cntB1>>8);
     aa6:	47 db       	rcall	.-2418   	; 0x136 <ascii_8>
								ascii_8(cntB1);
     aa8:	f7 01       	movw	r30, r14
     aaa:	80 81       	ld	r24, Z
     aac:	44 db       	rcall	.-2424   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ascii_8(cntB1>>8);
     aae:	80 91 1e 01 	lds	r24, 0x011E
     ab2:	41 db       	rcall	.-2430   	; 0x136 <ascii_8>
								ascii_8(cntB1);
     ab4:	f7 01       	movw	r30, r14
     ab6:	80 81       	ld	r24, Z
     ab8:	3e db       	rcall	.-2436   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ascii_8(cntB1>>8);
     aba:	80 91 1e 01 	lds	r24, 0x011E
     abe:	3b db       	rcall	.-2442   	; 0x136 <ascii_8>
								ascii_8(cntB1);
     ac0:	f7 01       	movw	r30, r14
     ac2:	80 81       	ld	r24, Z
     ac4:	38 db       	rcall	.-2448   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ascii_8(cntA1>>8);
     ac6:	80 91 22 01 	lds	r24, 0x0122
     aca:	35 db       	rcall	.-2454   	; 0x136 <ascii_8>
								ascii_8(cntA1);
     acc:	f5 01       	movw	r30, r10
     ace:	80 81       	ld	r24, Z
     ad0:	32 db       	rcall	.-2460   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								//ctrl=0xFF-(3*(((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F)))+((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F)));
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
     ad2:	80 91 1d 01 	lds	r24, 0x011D
     ad6:	90 91 1e 01 	lds	r25, 0x011E
     ada:	ac 01       	movw	r20, r24
     adc:	4f 70       	andi	r20, 0x0F	; 15
     ade:	55 27       	eor	r21, r21
     ae0:	9c 01       	movw	r18, r24
     ae2:	23 2f       	mov	r18, r19
     ae4:	33 27       	eor	r19, r19
     ae6:	22 95       	swap	r18
     ae8:	2f 70       	andi	r18, 0x0F	; 15
     aea:	42 0f       	add	r20, r18
     aec:	53 1f       	adc	r21, r19
     aee:	29 2f       	mov	r18, r25
     af0:	33 27       	eor	r19, r19
     af2:	2f 70       	andi	r18, 0x0F	; 15
     af4:	33 27       	eor	r19, r19
     af6:	24 0f       	add	r18, r20
     af8:	35 1f       	adc	r19, r21
     afa:	92 95       	swap	r25
     afc:	82 95       	swap	r24
     afe:	8f 70       	andi	r24, 0x0F	; 15
     b00:	89 27       	eor	r24, r25
     b02:	9f 70       	andi	r25, 0x0F	; 15
     b04:	89 27       	eor	r24, r25
     b06:	8f 70       	andi	r24, 0x0F	; 15
     b08:	99 27       	eor	r25, r25
     b0a:	28 0f       	add	r18, r24
     b0c:	39 1f       	adc	r19, r25
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F));
     b0e:	80 91 21 01 	lds	r24, 0x0121
     b12:	90 91 22 01 	lds	r25, 0x0122
     b16:	bc 01       	movw	r22, r24
     b18:	6f 70       	andi	r22, 0x0F	; 15
     b1a:	77 27       	eor	r23, r23
     b1c:	ac 01       	movw	r20, r24
     b1e:	45 2f       	mov	r20, r21
     b20:	55 27       	eor	r21, r21
     b22:	42 95       	swap	r20
     b24:	4f 70       	andi	r20, 0x0F	; 15
     b26:	64 0f       	add	r22, r20
     b28:	75 1f       	adc	r23, r21
     b2a:	49 2f       	mov	r20, r25
     b2c:	55 27       	eor	r21, r21
     b2e:	4f 70       	andi	r20, 0x0F	; 15
     b30:	55 27       	eor	r21, r21
     b32:	46 0f       	add	r20, r22
     b34:	57 1f       	adc	r21, r23
     b36:	92 95       	swap	r25
     b38:	82 95       	swap	r24
     b3a:	8f 70       	andi	r24, 0x0F	; 15
     b3c:	89 27       	eor	r24, r25
     b3e:	9f 70       	andi	r25, 0x0F	; 15
     b40:	89 27       	eor	r24, r25
     b42:	8f 70       	andi	r24, 0x0F	; 15
     b44:	99 27       	eor	r25, r25
     b46:	84 0f       	add	r24, r20
     b48:	95 1f       	adc	r25, r21
								ascii_8(cntA1);
								//UART1_Transmit(' ');
								//ctrl=0xFF-(3*(((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F)))+((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F)));
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
     b4a:	82 0f       	add	r24, r18
     b4c:	93 1f       	adc	r25, r19
								ascii_8(cntA1>>8);
								ascii_8(cntA1);
								//UART1_Transmit(' ');
								//ctrl=0xFF-(3*(((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F)))+((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F)));
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F));
     b52:	28 0f       	add	r18, r24
     b54:	39 1f       	adc	r19, r25
								ctrl=0xFF-ctrl;
     b56:	c6 01       	movw	r24, r12
     b58:	82 1b       	sub	r24, r18
     b5a:	93 0b       	sbc	r25, r19
     b5c:	90 93 27 02 	sts	0x0227, r25
     b60:	80 93 26 02 	sts	0x0226, r24
								ascii_8(ctrl);
     b64:	e8 da       	rcall	.-2608   	; 0x136 <ascii_8>
								UART1_Transmit('*');
     b66:	8a e2       	ldi	r24, 0x2A	; 42
     b68:	cb da       	rcall	.-2666   	; 0x100 <UART1_Transmit>
								break;
     b6a:	f3 c0       	rjmp	.+486    	; 0xd52 <main+0x696>
								case 'H':
								cntB1=cntB;
     b6c:	90 91 1f 01 	lds	r25, 0x011F
     b70:	80 91 20 01 	lds	r24, 0x0120
     b74:	90 93 1d 01 	sts	0x011D, r25
     b78:	80 93 1e 01 	sts	0x011E, r24
								cntA1=cntAA;
     b7c:	20 91 0b 01 	lds	r18, 0x010B
     b80:	30 91 0c 01 	lds	r19, 0x010C
     b84:	30 93 22 01 	sts	0x0122, r19
     b88:	20 93 21 01 	sts	0x0121, r18
								ascii_8(cntB1>>8);
     b8c:	d4 da       	rcall	.-2648   	; 0x136 <ascii_8>
								ascii_8(cntB1);
     b8e:	f7 01       	movw	r30, r14
     b90:	80 81       	ld	r24, Z
     b92:	d1 da       	rcall	.-2654   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ascii_8(cntB1>>8);
     b94:	80 91 1e 01 	lds	r24, 0x011E
     b98:	ce da       	rcall	.-2660   	; 0x136 <ascii_8>
								ascii_8(cntB1);
     b9a:	f7 01       	movw	r30, r14
     b9c:	80 81       	ld	r24, Z
     b9e:	cb da       	rcall	.-2666   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ascii_8(cntB1>>8);
     ba0:	80 91 1e 01 	lds	r24, 0x011E
     ba4:	c8 da       	rcall	.-2672   	; 0x136 <ascii_8>
								ascii_8(cntB1);
     ba6:	f7 01       	movw	r30, r14
     ba8:	80 81       	ld	r24, Z
     baa:	c5 da       	rcall	.-2678   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								ascii_8(cntA1>>8);
     bac:	80 91 22 01 	lds	r24, 0x0122
     bb0:	c2 da       	rcall	.-2684   	; 0x136 <ascii_8>
								ascii_8(cntA1);
     bb2:	f5 01       	movw	r30, r10
     bb4:	80 81       	ld	r24, Z
     bb6:	bf da       	rcall	.-2690   	; 0x136 <ascii_8>
								//UART1_Transmit(' ');
								//ctrl=0xFF-(3*((cntB1&(0xF000))+(cntB1&(0x0F00))+(cntB1&(0x00F0))+(cntB1&(0x000F)))+(cntA1&(0xF000))+(cntA1&(0x0F00))+(cntA1&(0x00F0))+(cntA1&(0x000F)));
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
     bb8:	80 91 1d 01 	lds	r24, 0x011D
     bbc:	90 91 1e 01 	lds	r25, 0x011E
     bc0:	ac 01       	movw	r20, r24
     bc2:	4f 70       	andi	r20, 0x0F	; 15
     bc4:	55 27       	eor	r21, r21
     bc6:	9c 01       	movw	r18, r24
     bc8:	23 2f       	mov	r18, r19
     bca:	33 27       	eor	r19, r19
     bcc:	22 95       	swap	r18
     bce:	2f 70       	andi	r18, 0x0F	; 15
     bd0:	42 0f       	add	r20, r18
     bd2:	53 1f       	adc	r21, r19
     bd4:	29 2f       	mov	r18, r25
     bd6:	33 27       	eor	r19, r19
     bd8:	2f 70       	andi	r18, 0x0F	; 15
     bda:	33 27       	eor	r19, r19
     bdc:	24 0f       	add	r18, r20
     bde:	35 1f       	adc	r19, r21
     be0:	92 95       	swap	r25
     be2:	82 95       	swap	r24
     be4:	8f 70       	andi	r24, 0x0F	; 15
     be6:	89 27       	eor	r24, r25
     be8:	9f 70       	andi	r25, 0x0F	; 15
     bea:	89 27       	eor	r24, r25
     bec:	8f 70       	andi	r24, 0x0F	; 15
     bee:	99 27       	eor	r25, r25
     bf0:	28 0f       	add	r18, r24
     bf2:	39 1f       	adc	r19, r25
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F));
     bf4:	80 91 21 01 	lds	r24, 0x0121
     bf8:	90 91 22 01 	lds	r25, 0x0122
     bfc:	bc 01       	movw	r22, r24
     bfe:	6f 70       	andi	r22, 0x0F	; 15
     c00:	77 27       	eor	r23, r23
     c02:	ac 01       	movw	r20, r24
     c04:	45 2f       	mov	r20, r21
     c06:	55 27       	eor	r21, r21
     c08:	42 95       	swap	r20
     c0a:	4f 70       	andi	r20, 0x0F	; 15
     c0c:	64 0f       	add	r22, r20
     c0e:	75 1f       	adc	r23, r21
     c10:	49 2f       	mov	r20, r25
     c12:	55 27       	eor	r21, r21
     c14:	4f 70       	andi	r20, 0x0F	; 15
     c16:	55 27       	eor	r21, r21
     c18:	46 0f       	add	r20, r22
     c1a:	57 1f       	adc	r21, r23
     c1c:	92 95       	swap	r25
     c1e:	82 95       	swap	r24
     c20:	8f 70       	andi	r24, 0x0F	; 15
     c22:	89 27       	eor	r24, r25
     c24:	9f 70       	andi	r25, 0x0F	; 15
     c26:	89 27       	eor	r24, r25
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	99 27       	eor	r25, r25
     c2c:	84 0f       	add	r24, r20
     c2e:	95 1f       	adc	r25, r21
								ascii_8(cntA1);
								//UART1_Transmit(' ');
								//ctrl=0xFF-(3*((cntB1&(0xF000))+(cntB1&(0x0F00))+(cntB1&(0x00F0))+(cntB1&(0x000F)))+(cntA1&(0xF000))+(cntA1&(0x0F00))+(cntA1&(0x00F0))+(cntA1&(0x000F)));
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
     c30:	82 0f       	add	r24, r18
     c32:	93 1f       	adc	r25, r19
								ascii_8(cntA1>>8);
								ascii_8(cntA1);
								//UART1_Transmit(' ');
								//ctrl=0xFF-(3*((cntB1&(0xF000))+(cntB1&(0x0F00))+(cntB1&(0x00F0))+(cntB1&(0x000F)))+(cntA1&(0xF000))+(cntA1&(0x0F00))+(cntA1&(0x00F0))+(cntA1&(0x000F)));
								ctrl=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
								ctrl+=((cntB1>>12)&(0x000F))+((cntB1>>8)&(0x000F))+((cntB1>>4)&(0x000F))+((cntB1)&(0x000F));
								ctrl+=((cntA1>>12)&(0x000F))+((cntA1>>8)&(0x000F))+((cntA1>>4)&(0x000F))+((cntA1)&(0x000F));
     c38:	28 0f       	add	r18, r24
     c3a:	39 1f       	adc	r19, r25
								ctrl=0xFF-ctrl;
     c3c:	c6 01       	movw	r24, r12
     c3e:	82 1b       	sub	r24, r18
     c40:	93 0b       	sbc	r25, r19
     c42:	90 93 27 02 	sts	0x0227, r25
     c46:	80 93 26 02 	sts	0x0226, r24
								ascii_8(ctrl);
     c4a:	75 da       	rcall	.-2838   	; 0x136 <ascii_8>
								UART1_Transmit('*');
     c4c:	8a e2       	ldi	r24, 0x2A	; 42
     c4e:	58 da       	rcall	.-2896   	; 0x100 <UART1_Transmit>
								break;
     c50:	80 c0       	rjmp	.+256    	; 0xd52 <main+0x696>
								case 'C':
								UART1_Transmit('*');/*
     c52:	8a e2       	ldi	r24, 0x2A	; 42
     c54:	55 da       	rcall	.-2902   	; 0x100 <UART1_Transmit>
								UART1_Transmit('F');
								ascii_8(amper>>8);
								ascii_8(amper);
								UART1_Transmit(CR);*/
								break;
     c56:	7d c0       	rjmp	.+250    	; 0xd52 <main+0x696>
								default: UART1_Transmit('?');break;
     c58:	8f e3       	ldi	r24, 0x3F	; 63
     c5a:	52 da       	rcall	.-2908   	; 0x100 <UART1_Transmit>
     c5c:	7a c0       	rjmp	.+244    	; 0xd52 <main+0x696>
							}
					break;	
					case 'C':
							switch (glavmas[1])
     c5e:	f8 01       	movw	r30, r16
     c60:	80 81       	ld	r24, Z
     c62:	84 34       	cpi	r24, 0x44	; 68
     c64:	11 f4       	brne	.+4      	; 0xc6a <main+0x5ae>
							{
								case 'D':
								UART1_Transmit('*');/*
     c66:	8a e2       	ldi	r24, 0x2A	; 42
     c68:	4b da       	rcall	.-2922   	; 0x100 <UART1_Transmit>
								UART1_Transmit(CR);*/
								break;	
							}
							
					case 'D':
							switch (glavmas[1])
     c6a:	f8 01       	movw	r30, r16
     c6c:	80 81       	ld	r24, Z
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	fc 01       	movw	r30, r24
     c72:	e1 54       	subi	r30, 0x41	; 65
     c74:	f1 09       	sbc	r31, r1
     c76:	e7 30       	cpi	r30, 0x07	; 7
     c78:	f1 05       	cpc	r31, r1
     c7a:	08 f0       	brcs	.+2      	; 0xc7e <main+0x5c2>
     c7c:	65 c0       	rjmp	.+202    	; 0xd48 <main+0x68c>
     c7e:	e5 5a       	subi	r30, 0xA5	; 165
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	f3 c1       	rjmp	.+998    	; 0x106a <__tablejump2__>
							{
								case 'A':
								
								if ((glub%2)==0)
     c84:	80 91 1b 01 	lds	r24, 0x011B
     c88:	80 fd       	sbrc	r24, 0
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <main+0x5da>
								{
									
									UART1_Transmit(0x01);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	38 da       	rcall	.-2960   	; 0x100 <UART1_Transmit>
									UART1_Transmit('*');
     c90:	8a e2       	ldi	r24, 0x2A	; 42
     c92:	36 da       	rcall	.-2964   	; 0x100 <UART1_Transmit>
     c94:	5e c0       	rjmp	.+188    	; 0xd52 <main+0x696>
								}
								else 
								{
									
									UART1_Transmit(0x00);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	33 da       	rcall	.-2970   	; 0x100 <UART1_Transmit>
									UART1_Transmit('*');
     c9a:	8a e2       	ldi	r24, 0x2A	; 42
     c9c:	31 da       	rcall	.-2974   	; 0x100 <UART1_Transmit>
     c9e:	59 c0       	rjmp	.+178    	; 0xd52 <main+0x696>
								ascii_8(amper>>8);
								ascii_8(amper);
								UART1_Transmit(CR);*/
								break;
								case 'B':
								if ((metki%2)==0)
     ca0:	80 91 19 01 	lds	r24, 0x0119
     ca4:	80 fd       	sbrc	r24, 0
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <main+0x5f6>
								{
									UART1_Transmit(0x01);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	2a da       	rcall	.-2988   	; 0x100 <UART1_Transmit>
									UART1_Transmit('*');
     cac:	8a e2       	ldi	r24, 0x2A	; 42
     cae:	28 da       	rcall	.-2992   	; 0x100 <UART1_Transmit>
     cb0:	50 c0       	rjmp	.+160    	; 0xd52 <main+0x696>
								}
								else
								{
									UART1_Transmit(0x00);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	25 da       	rcall	.-2998   	; 0x100 <UART1_Transmit>
									UART1_Transmit('*');
     cb6:	8a e2       	ldi	r24, 0x2A	; 42
     cb8:	23 da       	rcall	.-3002   	; 0x100 <UART1_Transmit>
     cba:	4b c0       	rjmp	.+150    	; 0xd52 <main+0x696>
								ascii_8(amper>>8);
								ascii_8(amper);
								UART1_Transmit(CR);*/
								break;
								case 'E':
								UART1_Transmit('*');/*
     cbc:	8a e2       	ldi	r24, 0x2A	; 42
     cbe:	20 da       	rcall	.-3008   	; 0x100 <UART1_Transmit>
								UART1_Transmit('F');
								ascii_8(amper>>8);
								ascii_8(amper);
								UART1_Transmit(CR);*/
								break;
     cc0:	48 c0       	rjmp	.+144    	; 0xd52 <main+0x696>
								case 'C':
								glubina=glub;
     cc2:	90 91 1b 01 	lds	r25, 0x011B
     cc6:	80 91 1c 01 	lds	r24, 0x011C
     cca:	90 93 13 01 	sts	0x0113, r25
     cce:	80 93 14 01 	sts	0x0114, r24
								ascii_8(glubina>>8);
     cd2:	31 da       	rcall	.-2974   	; 0x136 <ascii_8>
								ascii_8(glubina);
     cd4:	f4 01       	movw	r30, r8
     cd6:	80 81       	ld	r24, Z
     cd8:	2e da       	rcall	.-2980   	; 0x136 <ascii_8>
								ctrl=((glubina>>12)&(0x000F))+((glubina>>8)&(0x000F))+((glubina>>4)&(0x000F))+((glubina)&(0x000F));
     cda:	80 91 13 01 	lds	r24, 0x0113
     cde:	90 91 14 01 	lds	r25, 0x0114
     ce2:	ac 01       	movw	r20, r24
     ce4:	4f 70       	andi	r20, 0x0F	; 15
     ce6:	55 27       	eor	r21, r21
     ce8:	9c 01       	movw	r18, r24
     cea:	23 2f       	mov	r18, r19
     cec:	33 27       	eor	r19, r19
     cee:	22 95       	swap	r18
     cf0:	2f 70       	andi	r18, 0x0F	; 15
     cf2:	42 0f       	add	r20, r18
     cf4:	53 1f       	adc	r21, r19
     cf6:	29 2f       	mov	r18, r25
     cf8:	33 27       	eor	r19, r19
     cfa:	2f 70       	andi	r18, 0x0F	; 15
     cfc:	33 27       	eor	r19, r19
     cfe:	24 0f       	add	r18, r20
     d00:	35 1f       	adc	r19, r21
     d02:	92 95       	swap	r25
     d04:	82 95       	swap	r24
     d06:	8f 70       	andi	r24, 0x0F	; 15
     d08:	89 27       	eor	r24, r25
     d0a:	9f 70       	andi	r25, 0x0F	; 15
     d0c:	89 27       	eor	r24, r25
     d0e:	8f 70       	andi	r24, 0x0F	; 15
     d10:	99 27       	eor	r25, r25
     d12:	82 0f       	add	r24, r18
     d14:	93 1f       	adc	r25, r19
								ctrl=0xFF-ctrl;
     d16:	96 01       	movw	r18, r12
     d18:	28 1b       	sub	r18, r24
     d1a:	39 0b       	sbc	r19, r25
     d1c:	c9 01       	movw	r24, r18
     d1e:	30 93 27 02 	sts	0x0227, r19
     d22:	20 93 26 02 	sts	0x0226, r18
								ascii_8(ctrl);
     d26:	07 da       	rcall	.-3058   	; 0x136 <ascii_8>
								UART1_Transmit('*');/*
     d28:	8a e2       	ldi	r24, 0x2A	; 42
     d2a:	ea d9       	rcall	.-3116   	; 0x100 <UART1_Transmit>
								UART1_Transmit('F');
								ascii_8(amper>>8);
								ascii_8(amper);
								UART1_Transmit(CR);*/
								break;
     d2c:	12 c0       	rjmp	.+36     	; 0xd52 <main+0x696>
								case 'D':
								glub=0;
     d2e:	10 92 1c 01 	sts	0x011C, r1
     d32:	10 92 1b 01 	sts	0x011B, r1
								UART1_Transmit('*');/*
     d36:	8a e2       	ldi	r24, 0x2A	; 42
     d38:	e3 d9       	rcall	.-3130   	; 0x100 <UART1_Transmit>
								UART1_Transmit('F');
								ascii_8(amper>>8);
								ascii_8(amper);
								UART1_Transmit(CR);*/
								break;
     d3a:	0b c0       	rjmp	.+22     	; 0xd52 <main+0x696>
								case 'F':
								//UART1_Transmit(0x0000);
								UART1_Transmit('*');/*
     d3c:	8a e2       	ldi	r24, 0x2A	; 42
     d3e:	e0 d9       	rcall	.-3136   	; 0x100 <UART1_Transmit>
								UART1_Transmit('F');
								ascii_8(amper>>8);
								ascii_8(amper);
								UART1_Transmit(CR);*/
								break;
     d40:	08 c0       	rjmp	.+16     	; 0xd52 <main+0x696>
								case 'G':
								//UART1_Transmit(0x0000);
								UART1_Transmit('*');/*
     d42:	8a e2       	ldi	r24, 0x2A	; 42
     d44:	dd d9       	rcall	.-3142   	; 0x100 <UART1_Transmit>
								UART1_Transmit('F');
								ascii_8(amper>>8);
								ascii_8(amper);
								UART1_Transmit(CR);*/
								break;
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <main+0x696>
								default: UART1_Transmit('?');break;
     d48:	8f e3       	ldi	r24, 0x3F	; 63
     d4a:	da d9       	rcall	.-3148   	; 0x100 <UART1_Transmit>
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <main+0x696>
							}
					break;
					default: UART1_Transmit('?');break;
     d4e:	8f e3       	ldi	r24, 0x3F	; 63
     d50:	d7 d9       	rcall	.-3154   	; 0x100 <UART1_Transmit>
					
					}
					Priem = 0;
     d52:	10 92 23 02 	sts	0x0223, r1
     d56:	10 92 22 02 	sts	0x0222, r1
					Rec = 0;
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	0b cd       	rjmp	.-1514   	; 0x776 <main+0xba>
		
				}
				else Rec++;	
     d60:	2f 5f       	subi	r18, 0xFF	; 255
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	08 cd       	rjmp	.-1520   	; 0x776 <main+0xba>

00000d66 <__subsf3>:
     d66:	50 58       	subi	r21, 0x80	; 128

00000d68 <__addsf3>:
     d68:	bb 27       	eor	r27, r27
     d6a:	aa 27       	eor	r26, r26
     d6c:	0e d0       	rcall	.+28     	; 0xd8a <__addsf3x>
     d6e:	e0 c0       	rjmp	.+448    	; 0xf30 <__fp_round>
     d70:	d1 d0       	rcall	.+418    	; 0xf14 <__fp_pscA>
     d72:	30 f0       	brcs	.+12     	; 0xd80 <__addsf3+0x18>
     d74:	d6 d0       	rcall	.+428    	; 0xf22 <__fp_pscB>
     d76:	20 f0       	brcs	.+8      	; 0xd80 <__addsf3+0x18>
     d78:	31 f4       	brne	.+12     	; 0xd86 <__addsf3+0x1e>
     d7a:	9f 3f       	cpi	r25, 0xFF	; 255
     d7c:	11 f4       	brne	.+4      	; 0xd82 <__addsf3+0x1a>
     d7e:	1e f4       	brtc	.+6      	; 0xd86 <__addsf3+0x1e>
     d80:	c6 c0       	rjmp	.+396    	; 0xf0e <__fp_nan>
     d82:	0e f4       	brtc	.+2      	; 0xd86 <__addsf3+0x1e>
     d84:	e0 95       	com	r30
     d86:	e7 fb       	bst	r30, 7
     d88:	bc c0       	rjmp	.+376    	; 0xf02 <__fp_inf>

00000d8a <__addsf3x>:
     d8a:	e9 2f       	mov	r30, r25
     d8c:	e2 d0       	rcall	.+452    	; 0xf52 <__fp_split3>
     d8e:	80 f3       	brcs	.-32     	; 0xd70 <__addsf3+0x8>
     d90:	ba 17       	cp	r27, r26
     d92:	62 07       	cpc	r22, r18
     d94:	73 07       	cpc	r23, r19
     d96:	84 07       	cpc	r24, r20
     d98:	95 07       	cpc	r25, r21
     d9a:	18 f0       	brcs	.+6      	; 0xda2 <__addsf3x+0x18>
     d9c:	71 f4       	brne	.+28     	; 0xdba <__addsf3x+0x30>
     d9e:	9e f5       	brtc	.+102    	; 0xe06 <__addsf3x+0x7c>
     da0:	fa c0       	rjmp	.+500    	; 0xf96 <__fp_zero>
     da2:	0e f4       	brtc	.+2      	; 0xda6 <__addsf3x+0x1c>
     da4:	e0 95       	com	r30
     da6:	0b 2e       	mov	r0, r27
     da8:	ba 2f       	mov	r27, r26
     daa:	a0 2d       	mov	r26, r0
     dac:	0b 01       	movw	r0, r22
     dae:	b9 01       	movw	r22, r18
     db0:	90 01       	movw	r18, r0
     db2:	0c 01       	movw	r0, r24
     db4:	ca 01       	movw	r24, r20
     db6:	a0 01       	movw	r20, r0
     db8:	11 24       	eor	r1, r1
     dba:	ff 27       	eor	r31, r31
     dbc:	59 1b       	sub	r21, r25
     dbe:	99 f0       	breq	.+38     	; 0xde6 <__addsf3x+0x5c>
     dc0:	59 3f       	cpi	r21, 0xF9	; 249
     dc2:	50 f4       	brcc	.+20     	; 0xdd8 <__addsf3x+0x4e>
     dc4:	50 3e       	cpi	r21, 0xE0	; 224
     dc6:	68 f1       	brcs	.+90     	; 0xe22 <__addsf3x+0x98>
     dc8:	1a 16       	cp	r1, r26
     dca:	f0 40       	sbci	r31, 0x00	; 0
     dcc:	a2 2f       	mov	r26, r18
     dce:	23 2f       	mov	r18, r19
     dd0:	34 2f       	mov	r19, r20
     dd2:	44 27       	eor	r20, r20
     dd4:	58 5f       	subi	r21, 0xF8	; 248
     dd6:	f3 cf       	rjmp	.-26     	; 0xdbe <__addsf3x+0x34>
     dd8:	46 95       	lsr	r20
     dda:	37 95       	ror	r19
     ddc:	27 95       	ror	r18
     dde:	a7 95       	ror	r26
     de0:	f0 40       	sbci	r31, 0x00	; 0
     de2:	53 95       	inc	r21
     de4:	c9 f7       	brne	.-14     	; 0xdd8 <__addsf3x+0x4e>
     de6:	7e f4       	brtc	.+30     	; 0xe06 <__addsf3x+0x7c>
     de8:	1f 16       	cp	r1, r31
     dea:	ba 0b       	sbc	r27, r26
     dec:	62 0b       	sbc	r22, r18
     dee:	73 0b       	sbc	r23, r19
     df0:	84 0b       	sbc	r24, r20
     df2:	ba f0       	brmi	.+46     	; 0xe22 <__addsf3x+0x98>
     df4:	91 50       	subi	r25, 0x01	; 1
     df6:	a1 f0       	breq	.+40     	; 0xe20 <__addsf3x+0x96>
     df8:	ff 0f       	add	r31, r31
     dfa:	bb 1f       	adc	r27, r27
     dfc:	66 1f       	adc	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	c2 f7       	brpl	.-16     	; 0xdf4 <__addsf3x+0x6a>
     e04:	0e c0       	rjmp	.+28     	; 0xe22 <__addsf3x+0x98>
     e06:	ba 0f       	add	r27, r26
     e08:	62 1f       	adc	r22, r18
     e0a:	73 1f       	adc	r23, r19
     e0c:	84 1f       	adc	r24, r20
     e0e:	48 f4       	brcc	.+18     	; 0xe22 <__addsf3x+0x98>
     e10:	87 95       	ror	r24
     e12:	77 95       	ror	r23
     e14:	67 95       	ror	r22
     e16:	b7 95       	ror	r27
     e18:	f7 95       	ror	r31
     e1a:	9e 3f       	cpi	r25, 0xFE	; 254
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <__addsf3x+0x96>
     e1e:	b3 cf       	rjmp	.-154    	; 0xd86 <__addsf3+0x1e>
     e20:	93 95       	inc	r25
     e22:	88 0f       	add	r24, r24
     e24:	08 f0       	brcs	.+2      	; 0xe28 <__addsf3x+0x9e>
     e26:	99 27       	eor	r25, r25
     e28:	ee 0f       	add	r30, r30
     e2a:	97 95       	ror	r25
     e2c:	87 95       	ror	r24
     e2e:	08 95       	ret

00000e30 <__fixunssfsi>:
     e30:	98 d0       	rcall	.+304    	; 0xf62 <__fp_splitA>
     e32:	88 f0       	brcs	.+34     	; 0xe56 <__fixunssfsi+0x26>
     e34:	9f 57       	subi	r25, 0x7F	; 127
     e36:	90 f0       	brcs	.+36     	; 0xe5c <__fixunssfsi+0x2c>
     e38:	b9 2f       	mov	r27, r25
     e3a:	99 27       	eor	r25, r25
     e3c:	b7 51       	subi	r27, 0x17	; 23
     e3e:	a0 f0       	brcs	.+40     	; 0xe68 <__fixunssfsi+0x38>
     e40:	d1 f0       	breq	.+52     	; 0xe76 <__fixunssfsi+0x46>
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	1a f0       	brmi	.+6      	; 0xe52 <__fixunssfsi+0x22>
     e4c:	ba 95       	dec	r27
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <__fixunssfsi+0x12>
     e50:	12 c0       	rjmp	.+36     	; 0xe76 <__fixunssfsi+0x46>
     e52:	b1 30       	cpi	r27, 0x01	; 1
     e54:	81 f0       	breq	.+32     	; 0xe76 <__fixunssfsi+0x46>
     e56:	9f d0       	rcall	.+318    	; 0xf96 <__fp_zero>
     e58:	b1 e0       	ldi	r27, 0x01	; 1
     e5a:	08 95       	ret
     e5c:	9c c0       	rjmp	.+312    	; 0xf96 <__fp_zero>
     e5e:	67 2f       	mov	r22, r23
     e60:	78 2f       	mov	r23, r24
     e62:	88 27       	eor	r24, r24
     e64:	b8 5f       	subi	r27, 0xF8	; 248
     e66:	39 f0       	breq	.+14     	; 0xe76 <__fixunssfsi+0x46>
     e68:	b9 3f       	cpi	r27, 0xF9	; 249
     e6a:	cc f3       	brlt	.-14     	; 0xe5e <__fixunssfsi+0x2e>
     e6c:	86 95       	lsr	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b3 95       	inc	r27
     e74:	d9 f7       	brne	.-10     	; 0xe6c <__fixunssfsi+0x3c>
     e76:	3e f4       	brtc	.+14     	; 0xe86 <__fixunssfsi+0x56>
     e78:	90 95       	com	r25
     e7a:	80 95       	com	r24
     e7c:	70 95       	com	r23
     e7e:	61 95       	neg	r22
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	8f 4f       	sbci	r24, 0xFF	; 255
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	08 95       	ret

00000e88 <__floatunsisf>:
     e88:	e8 94       	clt
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <__floatsisf+0x12>

00000e8c <__floatsisf>:
     e8c:	97 fb       	bst	r25, 7
     e8e:	3e f4       	brtc	.+14     	; 0xe9e <__floatsisf+0x12>
     e90:	90 95       	com	r25
     e92:	80 95       	com	r24
     e94:	70 95       	com	r23
     e96:	61 95       	neg	r22
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	8f 4f       	sbci	r24, 0xFF	; 255
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	99 23       	and	r25, r25
     ea0:	a9 f0       	breq	.+42     	; 0xecc <__floatsisf+0x40>
     ea2:	f9 2f       	mov	r31, r25
     ea4:	96 e9       	ldi	r25, 0x96	; 150
     ea6:	bb 27       	eor	r27, r27
     ea8:	93 95       	inc	r25
     eaa:	f6 95       	lsr	r31
     eac:	87 95       	ror	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b7 95       	ror	r27
     eb4:	f1 11       	cpse	r31, r1
     eb6:	f8 cf       	rjmp	.-16     	; 0xea8 <__floatsisf+0x1c>
     eb8:	fa f4       	brpl	.+62     	; 0xef8 <__floatsisf+0x6c>
     eba:	bb 0f       	add	r27, r27
     ebc:	11 f4       	brne	.+4      	; 0xec2 <__floatsisf+0x36>
     ebe:	60 ff       	sbrs	r22, 0
     ec0:	1b c0       	rjmp	.+54     	; 0xef8 <__floatsisf+0x6c>
     ec2:	6f 5f       	subi	r22, 0xFF	; 255
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	16 c0       	rjmp	.+44     	; 0xef8 <__floatsisf+0x6c>
     ecc:	88 23       	and	r24, r24
     ece:	11 f0       	breq	.+4      	; 0xed4 <__floatsisf+0x48>
     ed0:	96 e9       	ldi	r25, 0x96	; 150
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <__floatsisf+0x6a>
     ed4:	77 23       	and	r23, r23
     ed6:	21 f0       	breq	.+8      	; 0xee0 <__floatsisf+0x54>
     ed8:	9e e8       	ldi	r25, 0x8E	; 142
     eda:	87 2f       	mov	r24, r23
     edc:	76 2f       	mov	r23, r22
     ede:	05 c0       	rjmp	.+10     	; 0xeea <__floatsisf+0x5e>
     ee0:	66 23       	and	r22, r22
     ee2:	71 f0       	breq	.+28     	; 0xf00 <__floatsisf+0x74>
     ee4:	96 e8       	ldi	r25, 0x86	; 134
     ee6:	86 2f       	mov	r24, r22
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	2a f0       	brmi	.+10     	; 0xef8 <__floatsisf+0x6c>
     eee:	9a 95       	dec	r25
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	da f7       	brpl	.-10     	; 0xeee <__floatsisf+0x62>
     ef8:	88 0f       	add	r24, r24
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	97 f9       	bld	r25, 7
     f00:	08 95       	ret

00000f02 <__fp_inf>:
     f02:	97 f9       	bld	r25, 7
     f04:	9f 67       	ori	r25, 0x7F	; 127
     f06:	80 e8       	ldi	r24, 0x80	; 128
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	08 95       	ret

00000f0e <__fp_nan>:
     f0e:	9f ef       	ldi	r25, 0xFF	; 255
     f10:	80 ec       	ldi	r24, 0xC0	; 192
     f12:	08 95       	ret

00000f14 <__fp_pscA>:
     f14:	00 24       	eor	r0, r0
     f16:	0a 94       	dec	r0
     f18:	16 16       	cp	r1, r22
     f1a:	17 06       	cpc	r1, r23
     f1c:	18 06       	cpc	r1, r24
     f1e:	09 06       	cpc	r0, r25
     f20:	08 95       	ret

00000f22 <__fp_pscB>:
     f22:	00 24       	eor	r0, r0
     f24:	0a 94       	dec	r0
     f26:	12 16       	cp	r1, r18
     f28:	13 06       	cpc	r1, r19
     f2a:	14 06       	cpc	r1, r20
     f2c:	05 06       	cpc	r0, r21
     f2e:	08 95       	ret

00000f30 <__fp_round>:
     f30:	09 2e       	mov	r0, r25
     f32:	03 94       	inc	r0
     f34:	00 0c       	add	r0, r0
     f36:	11 f4       	brne	.+4      	; 0xf3c <__fp_round+0xc>
     f38:	88 23       	and	r24, r24
     f3a:	52 f0       	brmi	.+20     	; 0xf50 <__fp_round+0x20>
     f3c:	bb 0f       	add	r27, r27
     f3e:	40 f4       	brcc	.+16     	; 0xf50 <__fp_round+0x20>
     f40:	bf 2b       	or	r27, r31
     f42:	11 f4       	brne	.+4      	; 0xf48 <__fp_round+0x18>
     f44:	60 ff       	sbrs	r22, 0
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <__fp_round+0x20>
     f48:	6f 5f       	subi	r22, 0xFF	; 255
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	8f 4f       	sbci	r24, 0xFF	; 255
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	08 95       	ret

00000f52 <__fp_split3>:
     f52:	57 fd       	sbrc	r21, 7
     f54:	90 58       	subi	r25, 0x80	; 128
     f56:	44 0f       	add	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	59 f0       	breq	.+22     	; 0xf72 <__fp_splitA+0x10>
     f5c:	5f 3f       	cpi	r21, 0xFF	; 255
     f5e:	71 f0       	breq	.+28     	; 0xf7c <__fp_splitA+0x1a>
     f60:	47 95       	ror	r20

00000f62 <__fp_splitA>:
     f62:	88 0f       	add	r24, r24
     f64:	97 fb       	bst	r25, 7
     f66:	99 1f       	adc	r25, r25
     f68:	61 f0       	breq	.+24     	; 0xf82 <__fp_splitA+0x20>
     f6a:	9f 3f       	cpi	r25, 0xFF	; 255
     f6c:	79 f0       	breq	.+30     	; 0xf8c <__fp_splitA+0x2a>
     f6e:	87 95       	ror	r24
     f70:	08 95       	ret
     f72:	12 16       	cp	r1, r18
     f74:	13 06       	cpc	r1, r19
     f76:	14 06       	cpc	r1, r20
     f78:	55 1f       	adc	r21, r21
     f7a:	f2 cf       	rjmp	.-28     	; 0xf60 <__fp_split3+0xe>
     f7c:	46 95       	lsr	r20
     f7e:	f1 df       	rcall	.-30     	; 0xf62 <__fp_splitA>
     f80:	08 c0       	rjmp	.+16     	; 0xf92 <__fp_splitA+0x30>
     f82:	16 16       	cp	r1, r22
     f84:	17 06       	cpc	r1, r23
     f86:	18 06       	cpc	r1, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	f1 cf       	rjmp	.-30     	; 0xf6e <__fp_splitA+0xc>
     f8c:	86 95       	lsr	r24
     f8e:	71 05       	cpc	r23, r1
     f90:	61 05       	cpc	r22, r1
     f92:	08 94       	sec
     f94:	08 95       	ret

00000f96 <__fp_zero>:
     f96:	e8 94       	clt

00000f98 <__fp_szero>:
     f98:	bb 27       	eor	r27, r27
     f9a:	66 27       	eor	r22, r22
     f9c:	77 27       	eor	r23, r23
     f9e:	cb 01       	movw	r24, r22
     fa0:	97 f9       	bld	r25, 7
     fa2:	08 95       	ret

00000fa4 <__mulsf3>:
     fa4:	0b d0       	rcall	.+22     	; 0xfbc <__mulsf3x>
     fa6:	c4 cf       	rjmp	.-120    	; 0xf30 <__fp_round>
     fa8:	b5 df       	rcall	.-150    	; 0xf14 <__fp_pscA>
     faa:	28 f0       	brcs	.+10     	; 0xfb6 <__mulsf3+0x12>
     fac:	ba df       	rcall	.-140    	; 0xf22 <__fp_pscB>
     fae:	18 f0       	brcs	.+6      	; 0xfb6 <__mulsf3+0x12>
     fb0:	95 23       	and	r25, r21
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <__mulsf3+0x12>
     fb4:	a6 cf       	rjmp	.-180    	; 0xf02 <__fp_inf>
     fb6:	ab cf       	rjmp	.-170    	; 0xf0e <__fp_nan>
     fb8:	11 24       	eor	r1, r1
     fba:	ee cf       	rjmp	.-36     	; 0xf98 <__fp_szero>

00000fbc <__mulsf3x>:
     fbc:	ca df       	rcall	.-108    	; 0xf52 <__fp_split3>
     fbe:	a0 f3       	brcs	.-24     	; 0xfa8 <__mulsf3+0x4>

00000fc0 <__mulsf3_pse>:
     fc0:	95 9f       	mul	r25, r21
     fc2:	d1 f3       	breq	.-12     	; 0xfb8 <__mulsf3+0x14>
     fc4:	95 0f       	add	r25, r21
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	55 1f       	adc	r21, r21
     fca:	62 9f       	mul	r22, r18
     fcc:	f0 01       	movw	r30, r0
     fce:	72 9f       	mul	r23, r18
     fd0:	bb 27       	eor	r27, r27
     fd2:	f0 0d       	add	r31, r0
     fd4:	b1 1d       	adc	r27, r1
     fd6:	63 9f       	mul	r22, r19
     fd8:	aa 27       	eor	r26, r26
     fda:	f0 0d       	add	r31, r0
     fdc:	b1 1d       	adc	r27, r1
     fde:	aa 1f       	adc	r26, r26
     fe0:	64 9f       	mul	r22, r20
     fe2:	66 27       	eor	r22, r22
     fe4:	b0 0d       	add	r27, r0
     fe6:	a1 1d       	adc	r26, r1
     fe8:	66 1f       	adc	r22, r22
     fea:	82 9f       	mul	r24, r18
     fec:	22 27       	eor	r18, r18
     fee:	b0 0d       	add	r27, r0
     ff0:	a1 1d       	adc	r26, r1
     ff2:	62 1f       	adc	r22, r18
     ff4:	73 9f       	mul	r23, r19
     ff6:	b0 0d       	add	r27, r0
     ff8:	a1 1d       	adc	r26, r1
     ffa:	62 1f       	adc	r22, r18
     ffc:	83 9f       	mul	r24, r19
     ffe:	a0 0d       	add	r26, r0
    1000:	61 1d       	adc	r22, r1
    1002:	22 1f       	adc	r18, r18
    1004:	74 9f       	mul	r23, r20
    1006:	33 27       	eor	r19, r19
    1008:	a0 0d       	add	r26, r0
    100a:	61 1d       	adc	r22, r1
    100c:	23 1f       	adc	r18, r19
    100e:	84 9f       	mul	r24, r20
    1010:	60 0d       	add	r22, r0
    1012:	21 1d       	adc	r18, r1
    1014:	82 2f       	mov	r24, r18
    1016:	76 2f       	mov	r23, r22
    1018:	6a 2f       	mov	r22, r26
    101a:	11 24       	eor	r1, r1
    101c:	9f 57       	subi	r25, 0x7F	; 127
    101e:	50 40       	sbci	r21, 0x00	; 0
    1020:	8a f0       	brmi	.+34     	; 0x1044 <__mulsf3_pse+0x84>
    1022:	e1 f0       	breq	.+56     	; 0x105c <__mulsf3_pse+0x9c>
    1024:	88 23       	and	r24, r24
    1026:	4a f0       	brmi	.+18     	; 0x103a <__mulsf3_pse+0x7a>
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	bb 1f       	adc	r27, r27
    102e:	66 1f       	adc	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	91 50       	subi	r25, 0x01	; 1
    1036:	50 40       	sbci	r21, 0x00	; 0
    1038:	a9 f7       	brne	.-22     	; 0x1024 <__mulsf3_pse+0x64>
    103a:	9e 3f       	cpi	r25, 0xFE	; 254
    103c:	51 05       	cpc	r21, r1
    103e:	70 f0       	brcs	.+28     	; 0x105c <__mulsf3_pse+0x9c>
    1040:	60 cf       	rjmp	.-320    	; 0xf02 <__fp_inf>
    1042:	aa cf       	rjmp	.-172    	; 0xf98 <__fp_szero>
    1044:	5f 3f       	cpi	r21, 0xFF	; 255
    1046:	ec f3       	brlt	.-6      	; 0x1042 <__mulsf3_pse+0x82>
    1048:	98 3e       	cpi	r25, 0xE8	; 232
    104a:	dc f3       	brlt	.-10     	; 0x1042 <__mulsf3_pse+0x82>
    104c:	86 95       	lsr	r24
    104e:	77 95       	ror	r23
    1050:	67 95       	ror	r22
    1052:	b7 95       	ror	r27
    1054:	f7 95       	ror	r31
    1056:	e7 95       	ror	r30
    1058:	9f 5f       	subi	r25, 0xFF	; 255
    105a:	c1 f7       	brne	.-16     	; 0x104c <__mulsf3_pse+0x8c>
    105c:	fe 2b       	or	r31, r30
    105e:	88 0f       	add	r24, r24
    1060:	91 1d       	adc	r25, r1
    1062:	96 95       	lsr	r25
    1064:	87 95       	ror	r24
    1066:	97 f9       	bld	r25, 7
    1068:	08 95       	ret

0000106a <__tablejump2__>:
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31

0000106e <__tablejump__>:
    106e:	05 90       	lpm	r0, Z+
    1070:	f4 91       	lpm	r31, Z
    1072:	e0 2d       	mov	r30, r0
    1074:	09 94       	ijmp

00001076 <_exit>:
    1076:	f8 94       	cli

00001078 <__stop_program>:
    1078:	ff cf       	rjmp	.-2      	; 0x1078 <__stop_program>
