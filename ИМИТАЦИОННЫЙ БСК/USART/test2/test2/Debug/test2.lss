
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000234  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000168  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000212  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001d6  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000026  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	27 d0       	rcall	.+78     	; 0xf8 <main>
  aa:	3b c0       	rjmp	.+118    	; 0x122 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <PORT_Init>:
#include "asciim.h"

void PORT_Init (void)
{
	
	PORTA = 0x00;
  ae:	1b ba       	out	0x1b, r1	; 27
	DDRA  = 0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a bb       	out	0x1a, r24	; 26
	PORTB = 0x00;
  b4:	18 ba       	out	0x18, r1	; 24
	DDRB  = 0xFF;
  b6:	87 bb       	out	0x17, r24	; 23
	PORTC = 0x00; //m103 output only
  b8:	15 ba       	out	0x15, r1	; 21
	DDRC  = 0xFF;
  ba:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x00;
  bc:	12 ba       	out	0x12, r1	; 18
	DDRD  = 0xBB;
  be:	9b eb       	ldi	r25, 0xBB	; 187
  c0:	91 bb       	out	0x11, r25	; 17
	PORTE = 0x00;
  c2:	13 b8       	out	0x03, r1	; 3
	DDRE  = 0xBF;
  c4:	9f eb       	ldi	r25, 0xBF	; 191
  c6:	92 b9       	out	0x02, r25	; 2
	PORTF = 0x00;
  c8:	10 92 62 00 	sts	0x0062, r1
	DDRF  = 0xff;
  cc:	80 93 61 00 	sts	0x0061, r24
  d0:	08 95       	ret

000000d2 <USART1_Init>:
	
}
void USART1_Init( unsigned int baud )
{
	/* Set baud rate */
	UBRR1H = (unsigned char)(baud>>8);
  d2:	90 93 98 00 	sts	0x0098, r25
	UBRR1L = (unsigned char)baud;
  d6:	80 93 99 00 	sts	0x0099, r24
	/* Включаем приемник и передатчик УАРТ */ // разрешаем прерывание по приему.
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
  da:	88 e1       	ldi	r24, 0x18	; 24
  dc:	80 93 9a 00 	sts	0x009A, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	80 93 9d 00 	sts	0x009D, r24
  e6:	08 95       	ret

000000e8 <USART1_Transmit>:
}

void USART1_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
  e8:	eb e9       	ldi	r30, 0x9B	; 155
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	90 81       	ld	r25, Z
  ee:	95 ff       	sbrs	r25, 5
  f0:	fd cf       	rjmp	.-6      	; 0xec <USART1_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
  f2:	80 93 9c 00 	sts	0x009C, r24
  f6:	08 95       	ret

000000f8 <main>:


int main(void)
{
   
    PORT_Init();
  f8:	da df       	rcall	.-76     	; 0xae <PORT_Init>
	USART1_Init(103);
  fa:	87 e6       	ldi	r24, 0x67	; 103
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	e9 df       	rcall	.-46     	; 0xd2 <USART1_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e9       	ldi	r24, 0x9F	; 159
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0xc>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x12>
 10a:	00 00       	nop
	_delay_us(1000);
	while(1)
    {
       USART1_Transmit('R');
 10c:	82 e5       	ldi	r24, 0x52	; 82
 10e:	ec df       	rcall	.-40     	; 0xe8 <USART1_Transmit>
       USART1_Transmit('O');
 110:	8f e4       	ldi	r24, 0x4F	; 79
 112:	ea df       	rcall	.-44     	; 0xe8 <USART1_Transmit>
       USART1_Transmit('K');
 114:	8b e4       	ldi	r24, 0x4B	; 75
 116:	e8 df       	rcall	.-48     	; 0xe8 <USART1_Transmit>
       USART1_Transmit('A');
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	e6 df       	rcall	.-52     	; 0xe8 <USART1_Transmit>
       USART1_Transmit(CR);
 11c:	8d e0       	ldi	r24, 0x0D	; 13
 11e:	e4 df       	rcall	.-56     	; 0xe8 <USART1_Transmit>
 120:	f5 cf       	rjmp	.-22     	; 0x10c <main+0x14>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
